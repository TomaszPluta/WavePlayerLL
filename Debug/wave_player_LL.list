
wave_player_LL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032d4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800345c  0800345c  0001345c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080034f4  080034f4  000134f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080034f8  080034f8  000134f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00005ea0  20000000  080034fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00025ea0  2**0
                  CONTENTS
  7 .bss          00000028  20005ea0  20005ea0  00025ea0  2**2
                  ALLOC
  8 ._user_heap_stack 00000200  20005ec8  20005ec8  00025ea0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00025ea0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00004d75  00000000  00000000  00025ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000edf  00000000  00000000  0002ac45  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000450  00000000  00000000  0002bb28  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003d8  00000000  00000000  0002bf78  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000220a  00000000  00000000  0002c350  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000169e  00000000  00000000  0002e55a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002fbf8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001118  00000000  00000000  0002fc74  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00030d8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20005ea0 	.word	0x20005ea0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003444 	.word	0x08003444

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20005ea4 	.word	0x20005ea4
 80001c4:	08003444 	.word	0x08003444

080001c8 <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80001d8:	2b40      	cmp	r3, #64	; 0x40
 80001da:	bf0c      	ite	eq
 80001dc:	2301      	moveq	r3, #1
 80001de:	2300      	movne	r3, #0
 80001e0:	b2db      	uxtb	r3, r3
}
 80001e2:	4618      	mov	r0, r3
 80001e4:	370c      	adds	r7, #12
 80001e6:	46bd      	mov	sp, r7
 80001e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ec:	4770      	bx	lr

080001ee <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 80001ee:	b480      	push	{r7}
 80001f0:	b083      	sub	sp, #12
 80001f2:	af00      	add	r7, sp, #0
 80001f4:	6078      	str	r0, [r7, #4]
 80001f6:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80001f8:	683b      	ldr	r3, [r7, #0]
 80001fa:	b29b      	uxth	r3, r3
 80001fc:	461a      	mov	r2, r3
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	611a      	str	r2, [r3, #16]
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr

0800020e <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800020e:	b580      	push	{r7, lr}
 8000210:	b084      	sub	sp, #16
 8000212:	af00      	add	r7, sp, #0
 8000214:	6078      	str	r0, [r7, #4]
 8000216:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8000218:	2300      	movs	r3, #0
 800021a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800021c:	6878      	ldr	r0, [r7, #4]
 800021e:	f7ff ffd3 	bl	80001c8 <LL_SPI_IsEnabled>
 8000222:	4603      	mov	r3, r0
 8000224:	2b00      	cmp	r3, #0
 8000226:	d13b      	bne.n	80002a0 <LL_SPI_Init+0x92>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000230:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8000234:	683a      	ldr	r2, [r7, #0]
 8000236:	6811      	ldr	r1, [r2, #0]
 8000238:	683a      	ldr	r2, [r7, #0]
 800023a:	6852      	ldr	r2, [r2, #4]
 800023c:	4311      	orrs	r1, r2
 800023e:	683a      	ldr	r2, [r7, #0]
 8000240:	68d2      	ldr	r2, [r2, #12]
 8000242:	4311      	orrs	r1, r2
 8000244:	683a      	ldr	r2, [r7, #0]
 8000246:	6912      	ldr	r2, [r2, #16]
 8000248:	4311      	orrs	r1, r2
 800024a:	683a      	ldr	r2, [r7, #0]
 800024c:	6952      	ldr	r2, [r2, #20]
 800024e:	4311      	orrs	r1, r2
 8000250:	683a      	ldr	r2, [r7, #0]
 8000252:	6992      	ldr	r2, [r2, #24]
 8000254:	4311      	orrs	r1, r2
 8000256:	683a      	ldr	r2, [r7, #0]
 8000258:	69d2      	ldr	r2, [r2, #28]
 800025a:	4311      	orrs	r1, r2
 800025c:	683a      	ldr	r2, [r7, #0]
 800025e:	6a12      	ldr	r2, [r2, #32]
 8000260:	430a      	orrs	r2, r1
 8000262:	431a      	orrs	r2, r3
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	685b      	ldr	r3, [r3, #4]
 800026c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000270:	f023 0304 	bic.w	r3, r3, #4
 8000274:	683a      	ldr	r2, [r7, #0]
 8000276:	6891      	ldr	r1, [r2, #8]
 8000278:	683a      	ldr	r2, [r7, #0]
 800027a:	6952      	ldr	r2, [r2, #20]
 800027c:	0c12      	lsrs	r2, r2, #16
 800027e:	430a      	orrs	r2, r1
 8000280:	431a      	orrs	r2, r3
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	6a1b      	ldr	r3, [r3, #32]
 800028a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800028e:	d105      	bne.n	800029c <LL_SPI_Init+0x8e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000294:	4619      	mov	r1, r3
 8000296:	6878      	ldr	r0, [r7, #4]
 8000298:	f7ff ffa9 	bl	80001ee <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800029c:	2301      	movs	r3, #1
 800029e:	73fb      	strb	r3, [r7, #15]
  }

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	69db      	ldr	r3, [r3, #28]
 80002a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2S_SUPPORT */
  return status;
 80002ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80002ae:	4618      	mov	r0, r3
 80002b0:	3710      	adds	r7, #16
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
	...

080002b8 <get_fattime>:
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */


DWORD get_fattime (void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0

    return  ((2011UL-1980) << 25)    // Year = 2011
 80002bc:	4b02      	ldr	r3, [pc, #8]	; (80002c8 <get_fattime+0x10>)
            | (12U << 11)            // Hour = 12
            | (0U << 5)              // Min = 00
            | (0U >> 1)              // Sec = 00
            ;

}
 80002be:	4618      	mov	r0, r3
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr
 80002c8:	3e216000 	.word	0x3e216000

080002cc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80002cc:	b480      	push	{r7}
 80002ce:	b087      	sub	sp, #28
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	60f8      	str	r0, [r7, #12]
 80002d4:	60b9      	str	r1, [r7, #8]
 80002d6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80002dc:	68bb      	ldr	r3, [r7, #8]
 80002de:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 80002e0:	e007      	b.n	80002f2 <mem_cpy+0x26>
		*d++ = *s++;
 80002e2:	697b      	ldr	r3, [r7, #20]
 80002e4:	1c5a      	adds	r2, r3, #1
 80002e6:	617a      	str	r2, [r7, #20]
 80002e8:	693a      	ldr	r2, [r7, #16]
 80002ea:	1c51      	adds	r1, r2, #1
 80002ec:	6139      	str	r1, [r7, #16]
 80002ee:	7812      	ldrb	r2, [r2, #0]
 80002f0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	1e5a      	subs	r2, r3, #1
 80002f6:	607a      	str	r2, [r7, #4]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d1f2      	bne.n	80002e2 <mem_cpy+0x16>
}
 80002fc:	bf00      	nop
 80002fe:	371c      	adds	r7, #28
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr

08000308 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8000308:	b480      	push	{r7}
 800030a:	b087      	sub	sp, #28
 800030c:	af00      	add	r7, sp, #0
 800030e:	60f8      	str	r0, [r7, #12]
 8000310:	60b9      	str	r1, [r7, #8]
 8000312:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8000318:	e005      	b.n	8000326 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800031a:	697b      	ldr	r3, [r7, #20]
 800031c:	1c5a      	adds	r2, r3, #1
 800031e:	617a      	str	r2, [r7, #20]
 8000320:	68ba      	ldr	r2, [r7, #8]
 8000322:	b2d2      	uxtb	r2, r2
 8000324:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	1e5a      	subs	r2, r3, #1
 800032a:	607a      	str	r2, [r7, #4]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d1f4      	bne.n	800031a <mem_set+0x12>
}
 8000330:	bf00      	nop
 8000332:	371c      	adds	r7, #28
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr

0800033c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800033c:	b480      	push	{r7}
 800033e:	b089      	sub	sp, #36	; 0x24
 8000340:	af00      	add	r7, sp, #0
 8000342:	60f8      	str	r0, [r7, #12]
 8000344:	60b9      	str	r1, [r7, #8]
 8000346:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	61fb      	str	r3, [r7, #28]
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8000350:	2300      	movs	r3, #0
 8000352:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8000354:	bf00      	nop
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	1e5a      	subs	r2, r3, #1
 800035a:	607a      	str	r2, [r7, #4]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d00d      	beq.n	800037c <mem_cmp+0x40>
 8000360:	69fb      	ldr	r3, [r7, #28]
 8000362:	1c5a      	adds	r2, r3, #1
 8000364:	61fa      	str	r2, [r7, #28]
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	4619      	mov	r1, r3
 800036a:	69bb      	ldr	r3, [r7, #24]
 800036c:	1c5a      	adds	r2, r3, #1
 800036e:	61ba      	str	r2, [r7, #24]
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	1acb      	subs	r3, r1, r3
 8000374:	617b      	str	r3, [r7, #20]
 8000376:	697b      	ldr	r3, [r7, #20]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d0ec      	beq.n	8000356 <mem_cmp+0x1a>
	return r;
 800037c:	697b      	ldr	r3, [r7, #20]
}
 800037e:	4618      	mov	r0, r3
 8000380:	3724      	adds	r7, #36	; 0x24
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr

0800038a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800038a:	b480      	push	{r7}
 800038c:	b083      	sub	sp, #12
 800038e:	af00      	add	r7, sp, #0
 8000390:	6078      	str	r0, [r7, #4]
 8000392:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8000394:	e002      	b.n	800039c <chk_chr+0x12>
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	3301      	adds	r3, #1
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d005      	beq.n	80003b0 <chk_chr+0x26>
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	461a      	mov	r2, r3
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d1f2      	bne.n	8000396 <chk_chr+0xc>
	return *str;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	781b      	ldrb	r3, [r3, #0]
}
 80003b4:	4618      	mov	r0, r3
 80003b6:	370c      	adds	r7, #12
 80003b8:	46bd      	mov	sp, r7
 80003ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003be:	4770      	bx	lr

080003c0 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
 80003c8:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003ce:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
 80003d0:	68fa      	ldr	r2, [r7, #12]
 80003d2:	683b      	ldr	r3, [r7, #0]
 80003d4:	429a      	cmp	r2, r3
 80003d6:	d048      	beq.n	800046a <move_window+0xaa>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	791b      	ldrb	r3, [r3, #4]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d030      	beq.n	8000442 <move_window+0x82>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	7858      	ldrb	r0, [r3, #1]
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80003ea:	2301      	movs	r3, #1
 80003ec:	68fa      	ldr	r2, [r7, #12]
 80003ee:	f002 f8d5 	bl	800259c <disk_write>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <move_window+0x3c>
				return FR_DISK_ERR;
 80003f8:	2301      	movs	r3, #1
 80003fa:	e037      	b.n	800046c <move_window+0xac>
			fs->wflag = 0;
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	2200      	movs	r2, #0
 8000400:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	6a1a      	ldr	r2, [r3, #32]
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	69db      	ldr	r3, [r3, #28]
 800040a:	441a      	add	r2, r3
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	429a      	cmp	r2, r3
 8000410:	d917      	bls.n	8000442 <move_window+0x82>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	78db      	ldrb	r3, [r3, #3]
 8000416:	72fb      	strb	r3, [r7, #11]
 8000418:	e010      	b.n	800043c <move_window+0x7c>
					wsect += fs->fsize;
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	68fa      	ldr	r2, [r7, #12]
 8000420:	4413      	add	r3, r2
 8000422:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	7858      	ldrb	r0, [r3, #1]
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800042e:	2301      	movs	r3, #1
 8000430:	68fa      	ldr	r2, [r7, #12]
 8000432:	f002 f8b3 	bl	800259c <disk_write>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8000436:	7afb      	ldrb	r3, [r7, #11]
 8000438:	3b01      	subs	r3, #1
 800043a:	72fb      	strb	r3, [r7, #11]
 800043c:	7afb      	ldrb	r3, [r7, #11]
 800043e:	2b01      	cmp	r3, #1
 8000440:	d8eb      	bhi.n	800041a <move_window+0x5a>
				}
			}
		}
#endif
		if (sector) {
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d010      	beq.n	800046a <move_window+0xaa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	7858      	ldrb	r0, [r3, #1]
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8000452:	2301      	movs	r3, #1
 8000454:	683a      	ldr	r2, [r7, #0]
 8000456:	f002 f81d 	bl	8002494 <disk_read>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <move_window+0xa4>
				return FR_DISK_ERR;
 8000460:	2301      	movs	r3, #1
 8000462:	e003      	b.n	800046c <move_window+0xac>
			fs->winsect = sector;
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	683a      	ldr	r2, [r7, #0]
 8000468:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
 800046a:	2300      	movs	r3, #0
}
 800046c:	4618      	mov	r0, r3
 800046e:	3710      	adds	r7, #16
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}

08000474 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b084      	sub	sp, #16
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
 800047c:	2100      	movs	r1, #0
 800047e:	6878      	ldr	r0, [r7, #4]
 8000480:	f7ff ff9e 	bl	80003c0 <move_window>
 8000484:	4603      	mov	r3, r0
 8000486:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8000488:	7bfb      	ldrb	r3, [r7, #15]
 800048a:	2b00      	cmp	r3, #0
 800048c:	f040 808e 	bne.w	80005ac <sync+0x138>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	2b03      	cmp	r3, #3
 8000496:	d17d      	bne.n	8000594 <sync+0x120>
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	795b      	ldrb	r3, [r3, #5]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d079      	beq.n	8000594 <sync+0x120>
			fs->winsect = 0;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	2200      	movs	r2, #0
 80004a4:	62da      	str	r2, [r3, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	3330      	adds	r3, #48	; 0x30
 80004aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004ae:	2100      	movs	r1, #0
 80004b0:	4618      	mov	r0, r3
 80004b2:	f7ff ff29 	bl	8000308 <mem_set>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	2255      	movs	r2, #85	; 0x55
 80004ba:	f883 222e 	strb.w	r2, [r3, #558]	; 0x22e
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	22aa      	movs	r2, #170	; 0xaa
 80004c2:	f883 222f 	strb.w	r2, [r3, #559]	; 0x22f
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	2252      	movs	r2, #82	; 0x52
 80004ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	2252      	movs	r2, #82	; 0x52
 80004d2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	2261      	movs	r2, #97	; 0x61
 80004da:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	2241      	movs	r2, #65	; 0x41
 80004e2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	2272      	movs	r2, #114	; 0x72
 80004ea:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2272      	movs	r2, #114	; 0x72
 80004f2:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	2241      	movs	r2, #65	; 0x41
 80004fa:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	2261      	movs	r2, #97	; 0x61
 8000502:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	691b      	ldr	r3, [r3, #16]
 800050a:	b2da      	uxtb	r2, r3
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	691b      	ldr	r3, [r3, #16]
 8000516:	b29b      	uxth	r3, r3
 8000518:	0a1b      	lsrs	r3, r3, #8
 800051a:	b29b      	uxth	r3, r3
 800051c:	b2da      	uxtb	r2, r3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	691b      	ldr	r3, [r3, #16]
 8000528:	0c1b      	lsrs	r3, r3, #16
 800052a:	b2da      	uxtb	r2, r3
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	691b      	ldr	r3, [r3, #16]
 8000536:	0e1b      	lsrs	r3, r3, #24
 8000538:	b2da      	uxtb	r2, r3
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	68db      	ldr	r3, [r3, #12]
 8000544:	b2da      	uxtb	r2, r3
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	68db      	ldr	r3, [r3, #12]
 8000550:	b29b      	uxth	r3, r3
 8000552:	0a1b      	lsrs	r3, r3, #8
 8000554:	b29b      	uxth	r3, r3
 8000556:	b2da      	uxtb	r2, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	68db      	ldr	r3, [r3, #12]
 8000562:	0c1b      	lsrs	r3, r3, #16
 8000564:	b2da      	uxtb	r2, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	68db      	ldr	r3, [r3, #12]
 8000570:	0e1b      	lsrs	r3, r3, #24
 8000572:	b2da      	uxtb	r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	7858      	ldrb	r0, [r3, #1]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	695a      	ldr	r2, [r3, #20]
 8000588:	2301      	movs	r3, #1
 800058a:	f002 f807 	bl	800259c <disk_write>
			fs->fsi_flag = 0;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2200      	movs	r2, #0
 8000592:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, (void*)0) != RES_OK)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	785b      	ldrb	r3, [r3, #1]
 8000598:	2200      	movs	r2, #0
 800059a:	2100      	movs	r1, #0
 800059c:	4618      	mov	r0, r3
 800059e:	f002 f8a5 	bl	80026ec <disk_ioctl>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <sync+0x138>
			res = FR_DISK_ERR;
 80005a8:	2301      	movs	r3, #1
 80005aa:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80005ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3710      	adds	r7, #16
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80005b6:	b480      	push	{r7}
 80005b8:	b083      	sub	sp, #12
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
 80005be:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	3b02      	subs	r3, #2
 80005c4:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	1e9a      	subs	r2, r3, #2
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	429a      	cmp	r2, r3
 80005d0:	d801      	bhi.n	80005d6 <clust2sect+0x20>
 80005d2:	2300      	movs	r3, #0
 80005d4:	e008      	b.n	80005e8 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	789b      	ldrb	r3, [r3, #2]
 80005da:	461a      	mov	r2, r3
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	fb03 f202 	mul.w	r2, r3, r2
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005e6:	4413      	add	r3, r2
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d904      	bls.n	800060e <get_fat+0x1a>
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	699a      	ldr	r2, [r3, #24]
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	429a      	cmp	r2, r3
 800060c:	d801      	bhi.n	8000612 <get_fat+0x1e>
		return 1;
 800060e:	2301      	movs	r3, #1
 8000610:	e09b      	b.n	800074a <get_fat+0x156>

	switch (fs->fs_type) {
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	2b02      	cmp	r3, #2
 8000618:	d046      	beq.n	80006a8 <get_fat+0xb4>
 800061a:	2b03      	cmp	r3, #3
 800061c:	d064      	beq.n	80006e8 <get_fat+0xf4>
 800061e:	2b01      	cmp	r3, #1
 8000620:	f040 8091 	bne.w	8000746 <get_fat+0x152>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	617b      	str	r3, [r7, #20]
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	085b      	lsrs	r3, r3, #1
 800062c:	697a      	ldr	r2, [r7, #20]
 800062e:	4413      	add	r3, r2
 8000630:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6a1a      	ldr	r2, [r3, #32]
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	0a5b      	lsrs	r3, r3, #9
 800063a:	4413      	add	r3, r2
 800063c:	4619      	mov	r1, r3
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f7ff febe 	bl	80003c0 <move_window>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d176      	bne.n	8000738 <get_fat+0x144>
		wc = fs->win[bc % SS(fs)]; bc++;
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	4413      	add	r3, r2
 8000654:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000658:	613b      	str	r3, [r7, #16]
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	3301      	adds	r3, #1
 800065e:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6a1a      	ldr	r2, [r3, #32]
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	0a5b      	lsrs	r3, r3, #9
 8000668:	4413      	add	r3, r2
 800066a:	4619      	mov	r1, r3
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f7ff fea7 	bl	80003c0 <move_window>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d161      	bne.n	800073c <get_fat+0x148>
		wc |= fs->win[bc % SS(fs)] << 8;
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	4413      	add	r3, r2
 8000682:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000686:	021b      	lsls	r3, r3, #8
 8000688:	461a      	mov	r2, r3
 800068a:	693b      	ldr	r3, [r7, #16]
 800068c:	4313      	orrs	r3, r2
 800068e:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	2b00      	cmp	r3, #0
 8000698:	d002      	beq.n	80006a0 <get_fat+0xac>
 800069a:	693b      	ldr	r3, [r7, #16]
 800069c:	091b      	lsrs	r3, r3, #4
 800069e:	e054      	b.n	800074a <get_fat+0x156>
 80006a0:	693b      	ldr	r3, [r7, #16]
 80006a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80006a6:	e050      	b.n	800074a <get_fat+0x156>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	6a1a      	ldr	r2, [r3, #32]
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	0a1b      	lsrs	r3, r3, #8
 80006b0:	4413      	add	r3, r2
 80006b2:	4619      	mov	r1, r3
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f7ff fe83 	bl	80003c0 <move_window>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d13f      	bne.n	8000740 <get_fat+0x14c>
		p = &fs->win[clst * 2 % SS(fs)];
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80006c8:	3330      	adds	r3, #48	; 0x30
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	4413      	add	r3, r2
 80006ce:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	3301      	adds	r3, #1
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	021b      	lsls	r3, r3, #8
 80006d8:	b21a      	sxth	r2, r3
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	b21b      	sxth	r3, r3
 80006e0:	4313      	orrs	r3, r2
 80006e2:	b21b      	sxth	r3, r3
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	e030      	b.n	800074a <get_fat+0x156>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6a1a      	ldr	r2, [r3, #32]
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	09db      	lsrs	r3, r3, #7
 80006f0:	4413      	add	r3, r2
 80006f2:	4619      	mov	r1, r3
 80006f4:	6878      	ldr	r0, [r7, #4]
 80006f6:	f7ff fe63 	bl	80003c0 <move_window>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d121      	bne.n	8000744 <get_fat+0x150>
		p = &fs->win[clst * 4 % SS(fs)];
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8000708:	3330      	adds	r3, #48	; 0x30
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	4413      	add	r3, r2
 800070e:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	3303      	adds	r3, #3
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	061a      	lsls	r2, r3, #24
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	3302      	adds	r3, #2
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	041b      	lsls	r3, r3, #16
 8000720:	4313      	orrs	r3, r2
 8000722:	68fa      	ldr	r2, [r7, #12]
 8000724:	3201      	adds	r2, #1
 8000726:	7812      	ldrb	r2, [r2, #0]
 8000728:	0212      	lsls	r2, r2, #8
 800072a:	4313      	orrs	r3, r2
 800072c:	68fa      	ldr	r2, [r7, #12]
 800072e:	7812      	ldrb	r2, [r2, #0]
 8000730:	4313      	orrs	r3, r2
 8000732:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000736:	e008      	b.n	800074a <get_fat+0x156>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8000738:	bf00      	nop
 800073a:	e004      	b.n	8000746 <get_fat+0x152>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 800073c:	bf00      	nop
 800073e:	e002      	b.n	8000746 <get_fat+0x152>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 8000740:	bf00      	nop
 8000742:	e000      	b.n	8000746 <get_fat+0x152>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 8000744:	bf00      	nop
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
 8000746:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800074a:	4618      	mov	r0, r3
 800074c:	3718      	adds	r7, #24
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b088      	sub	sp, #32
 8000756:	af00      	add	r7, sp, #0
 8000758:	60f8      	str	r0, [r7, #12]
 800075a:	60b9      	str	r1, [r7, #8]
 800075c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	2b01      	cmp	r3, #1
 8000762:	d904      	bls.n	800076e <put_fat+0x1c>
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	699a      	ldr	r2, [r3, #24]
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	429a      	cmp	r2, r3
 800076c:	d802      	bhi.n	8000774 <put_fat+0x22>
		res = FR_INT_ERR;
 800076e:	2302      	movs	r3, #2
 8000770:	77fb      	strb	r3, [r7, #31]
 8000772:	e0e9      	b.n	8000948 <put_fat+0x1f6>

	} else {
		switch (fs->fs_type) {
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b02      	cmp	r3, #2
 800077a:	d070      	beq.n	800085e <put_fat+0x10c>
 800077c:	2b03      	cmp	r3, #3
 800077e:	f000 8091 	beq.w	80008a4 <put_fat+0x152>
 8000782:	2b01      	cmp	r3, #1
 8000784:	f040 80d3 	bne.w	800092e <put_fat+0x1dc>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	61bb      	str	r3, [r7, #24]
 800078c:	69bb      	ldr	r3, [r7, #24]
 800078e:	085b      	lsrs	r3, r3, #1
 8000790:	69ba      	ldr	r2, [r7, #24]
 8000792:	4413      	add	r3, r2
 8000794:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	6a1a      	ldr	r2, [r3, #32]
 800079a:	69bb      	ldr	r3, [r7, #24]
 800079c:	0a5b      	lsrs	r3, r3, #9
 800079e:	4413      	add	r3, r2
 80007a0:	4619      	mov	r1, r3
 80007a2:	68f8      	ldr	r0, [r7, #12]
 80007a4:	f7ff fe0c 	bl	80003c0 <move_window>
 80007a8:	4603      	mov	r3, r0
 80007aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80007ac:	7ffb      	ldrb	r3, [r7, #31]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	f040 80c0 	bne.w	8000934 <put_fat+0x1e2>
			p = &fs->win[bc % SS(fs)];
 80007b4:	69bb      	ldr	r3, [r7, #24]
 80007b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80007ba:	3330      	adds	r3, #48	; 0x30
 80007bc:	68fa      	ldr	r2, [r7, #12]
 80007be:	4413      	add	r3, r2
 80007c0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	f003 0301 	and.w	r3, r3, #1
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d00d      	beq.n	80007e8 <put_fat+0x96>
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	b25b      	sxtb	r3, r3
 80007d2:	f003 030f 	and.w	r3, r3, #15
 80007d6:	b25a      	sxtb	r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	011b      	lsls	r3, r3, #4
 80007de:	b25b      	sxtb	r3, r3
 80007e0:	4313      	orrs	r3, r2
 80007e2:	b25b      	sxtb	r3, r3
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	e001      	b.n	80007ec <put_fat+0x9a>
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	697a      	ldr	r2, [r7, #20]
 80007ee:	7013      	strb	r3, [r2, #0]
			bc++;
 80007f0:	69bb      	ldr	r3, [r7, #24]
 80007f2:	3301      	adds	r3, #1
 80007f4:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	2201      	movs	r2, #1
 80007fa:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	6a1a      	ldr	r2, [r3, #32]
 8000800:	69bb      	ldr	r3, [r7, #24]
 8000802:	0a5b      	lsrs	r3, r3, #9
 8000804:	4413      	add	r3, r2
 8000806:	4619      	mov	r1, r3
 8000808:	68f8      	ldr	r0, [r7, #12]
 800080a:	f7ff fdd9 	bl	80003c0 <move_window>
 800080e:	4603      	mov	r3, r0
 8000810:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8000812:	7ffb      	ldrb	r3, [r7, #31]
 8000814:	2b00      	cmp	r3, #0
 8000816:	f040 808f 	bne.w	8000938 <put_fat+0x1e6>
			p = &fs->win[bc % SS(fs)];
 800081a:	69bb      	ldr	r3, [r7, #24]
 800081c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000820:	3330      	adds	r3, #48	; 0x30
 8000822:	68fa      	ldr	r2, [r7, #12]
 8000824:	4413      	add	r3, r2
 8000826:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	2b00      	cmp	r3, #0
 8000830:	d003      	beq.n	800083a <put_fat+0xe8>
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	091b      	lsrs	r3, r3, #4
 8000836:	b2db      	uxtb	r3, r3
 8000838:	e00e      	b.n	8000858 <put_fat+0x106>
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	b25b      	sxtb	r3, r3
 8000840:	f023 030f 	bic.w	r3, r3, #15
 8000844:	b25a      	sxtb	r2, r3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	0a1b      	lsrs	r3, r3, #8
 800084a:	b25b      	sxtb	r3, r3
 800084c:	f003 030f 	and.w	r3, r3, #15
 8000850:	b25b      	sxtb	r3, r3
 8000852:	4313      	orrs	r3, r2
 8000854:	b25b      	sxtb	r3, r3
 8000856:	b2db      	uxtb	r3, r3
 8000858:	697a      	ldr	r2, [r7, #20]
 800085a:	7013      	strb	r3, [r2, #0]
			break;
 800085c:	e071      	b.n	8000942 <put_fat+0x1f0>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	6a1a      	ldr	r2, [r3, #32]
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	0a1b      	lsrs	r3, r3, #8
 8000866:	4413      	add	r3, r2
 8000868:	4619      	mov	r1, r3
 800086a:	68f8      	ldr	r0, [r7, #12]
 800086c:	f7ff fda8 	bl	80003c0 <move_window>
 8000870:	4603      	mov	r3, r0
 8000872:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8000874:	7ffb      	ldrb	r3, [r7, #31]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d160      	bne.n	800093c <put_fat+0x1ea>
			p = &fs->win[clst * 2 % SS(fs)];
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8000882:	3330      	adds	r3, #48	; 0x30
 8000884:	68fa      	ldr	r2, [r7, #12]
 8000886:	4413      	add	r3, r2
 8000888:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	b2da      	uxtb	r2, r3
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	701a      	strb	r2, [r3, #0]
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	3301      	adds	r3, #1
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	b292      	uxth	r2, r2
 800089a:	0a12      	lsrs	r2, r2, #8
 800089c:	b292      	uxth	r2, r2
 800089e:	b2d2      	uxtb	r2, r2
 80008a0:	701a      	strb	r2, [r3, #0]
			break;
 80008a2:	e04e      	b.n	8000942 <put_fat+0x1f0>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	6a1a      	ldr	r2, [r3, #32]
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	09db      	lsrs	r3, r3, #7
 80008ac:	4413      	add	r3, r2
 80008ae:	4619      	mov	r1, r3
 80008b0:	68f8      	ldr	r0, [r7, #12]
 80008b2:	f7ff fd85 	bl	80003c0 <move_window>
 80008b6:	4603      	mov	r3, r0
 80008b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80008ba:	7ffb      	ldrb	r3, [r7, #31]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d13f      	bne.n	8000940 <put_fat+0x1ee>
			p = &fs->win[clst * 4 % SS(fs)];
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80008c8:	3330      	adds	r3, #48	; 0x30
 80008ca:	68fa      	ldr	r2, [r7, #12]
 80008cc:	4413      	add	r3, r2
 80008ce:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	3303      	adds	r3, #3
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	061a      	lsls	r2, r3, #24
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	3302      	adds	r3, #2
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	041b      	lsls	r3, r3, #16
 80008e0:	4313      	orrs	r3, r2
 80008e2:	697a      	ldr	r2, [r7, #20]
 80008e4:	3201      	adds	r2, #1
 80008e6:	7812      	ldrb	r2, [r2, #0]
 80008e8:	0212      	lsls	r2, r2, #8
 80008ea:	4313      	orrs	r3, r2
 80008ec:	697a      	ldr	r2, [r7, #20]
 80008ee:	7812      	ldrb	r2, [r2, #0]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	b2da      	uxtb	r2, r3
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	701a      	strb	r2, [r3, #0]
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	3301      	adds	r3, #1
 8000908:	687a      	ldr	r2, [r7, #4]
 800090a:	b292      	uxth	r2, r2
 800090c:	0a12      	lsrs	r2, r2, #8
 800090e:	b292      	uxth	r2, r2
 8000910:	b2d2      	uxtb	r2, r2
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	3302      	adds	r3, #2
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	0c12      	lsrs	r2, r2, #16
 800091c:	b2d2      	uxtb	r2, r2
 800091e:	701a      	strb	r2, [r3, #0]
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	3303      	adds	r3, #3
 8000924:	687a      	ldr	r2, [r7, #4]
 8000926:	0e12      	lsrs	r2, r2, #24
 8000928:	b2d2      	uxtb	r2, r2
 800092a:	701a      	strb	r2, [r3, #0]
			break;
 800092c:	e009      	b.n	8000942 <put_fat+0x1f0>

		default :
			res = FR_INT_ERR;
 800092e:	2302      	movs	r3, #2
 8000930:	77fb      	strb	r3, [r7, #31]
 8000932:	e006      	b.n	8000942 <put_fat+0x1f0>
			if (res != FR_OK) break;
 8000934:	bf00      	nop
 8000936:	e004      	b.n	8000942 <put_fat+0x1f0>
			if (res != FR_OK) break;
 8000938:	bf00      	nop
 800093a:	e002      	b.n	8000942 <put_fat+0x1f0>
			if (res != FR_OK) break;
 800093c:	bf00      	nop
 800093e:	e000      	b.n	8000942 <put_fat+0x1f0>
			if (res != FR_OK) break;
 8000940:	bf00      	nop
		}
		fs->wflag = 1;
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	2201      	movs	r2, #1
 8000946:	711a      	strb	r2, [r3, #4]
	}

	return res;
 8000948:	7ffb      	ldrb	r3, [r7, #31]
}
 800094a:	4618      	mov	r0, r3
 800094c:	3720      	adds	r7, #32
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	b084      	sub	sp, #16
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
 800095a:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	2b01      	cmp	r3, #1
 8000960:	d904      	bls.n	800096c <remove_chain+0x1a>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	699a      	ldr	r2, [r3, #24]
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	429a      	cmp	r2, r3
 800096a:	d802      	bhi.n	8000972 <remove_chain+0x20>
		res = FR_INT_ERR;
 800096c:	2302      	movs	r3, #2
 800096e:	73fb      	strb	r3, [r7, #15]
 8000970:	e039      	b.n	80009e6 <remove_chain+0x94>

	} else {
		res = FR_OK;
 8000972:	2300      	movs	r3, #0
 8000974:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8000976:	e02d      	b.n	80009d4 <remove_chain+0x82>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8000978:	6839      	ldr	r1, [r7, #0]
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f7ff fe3a 	bl	80005f4 <get_fat>
 8000980:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d02b      	beq.n	80009e0 <remove_chain+0x8e>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	2b01      	cmp	r3, #1
 800098c:	d102      	bne.n	8000994 <remove_chain+0x42>
 800098e:	2302      	movs	r3, #2
 8000990:	73fb      	strb	r3, [r7, #15]
 8000992:	e028      	b.n	80009e6 <remove_chain+0x94>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800099a:	d102      	bne.n	80009a2 <remove_chain+0x50>
 800099c:	2301      	movs	r3, #1
 800099e:	73fb      	strb	r3, [r7, #15]
 80009a0:	e021      	b.n	80009e6 <remove_chain+0x94>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80009a2:	2200      	movs	r2, #0
 80009a4:	6839      	ldr	r1, [r7, #0]
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	f7ff fed3 	bl	8000752 <put_fat>
 80009ac:	4603      	mov	r3, r0
 80009ae:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80009b0:	7bfb      	ldrb	r3, [r7, #15]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d116      	bne.n	80009e4 <remove_chain+0x92>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	691b      	ldr	r3, [r3, #16]
 80009ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009be:	d007      	beq.n	80009d0 <remove_chain+0x7e>
				fs->free_clust++;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	691b      	ldr	r3, [r3, #16]
 80009c4:	1c5a      	adds	r2, r3, #1
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2201      	movs	r2, #1
 80009ce:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	699a      	ldr	r2, [r3, #24]
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	429a      	cmp	r2, r3
 80009dc:	d8cc      	bhi.n	8000978 <remove_chain+0x26>
 80009de:	e002      	b.n	80009e6 <remove_chain+0x94>
			if (nxt == 0) break;				/* Empty cluster? */
 80009e0:	bf00      	nop
 80009e2:	e000      	b.n	80009e6 <remove_chain+0x94>
			if (res != FR_OK) break;
 80009e4:	bf00      	nop
		}
	}

	return res;
 80009e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3710      	adds	r7, #16
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d10d      	bne.n	8000a1c <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d004      	beq.n	8000a16 <create_chain+0x26>
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	699a      	ldr	r2, [r3, #24]
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d815      	bhi.n	8000a42 <create_chain+0x52>
 8000a16:	2301      	movs	r3, #1
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	e012      	b.n	8000a42 <create_chain+0x52>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8000a1c:	6839      	ldr	r1, [r7, #0]
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f7ff fde8 	bl	80005f4 <get_fat>
 8000a24:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d801      	bhi.n	8000a30 <create_chain+0x40>
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	e064      	b.n	8000afa <create_chain+0x10a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	699a      	ldr	r2, [r3, #24]
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	429a      	cmp	r2, r3
 8000a38:	d901      	bls.n	8000a3e <create_chain+0x4e>
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	e05d      	b.n	8000afa <create_chain+0x10a>
		scl = clst;
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8000a42:	693b      	ldr	r3, [r7, #16]
 8000a44:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	699a      	ldr	r2, [r3, #24]
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	429a      	cmp	r2, r3
 8000a54:	d807      	bhi.n	8000a66 <create_chain+0x76>
			ncl = 2;
 8000a56:	2302      	movs	r3, #2
 8000a58:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8000a5a:	697a      	ldr	r2, [r7, #20]
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d901      	bls.n	8000a66 <create_chain+0x76>
 8000a62:	2300      	movs	r3, #0
 8000a64:	e049      	b.n	8000afa <create_chain+0x10a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8000a66:	6979      	ldr	r1, [r7, #20]
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f7ff fdc3 	bl	80005f4 <get_fat>
 8000a6e:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d00e      	beq.n	8000a94 <create_chain+0xa4>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a7c:	d002      	beq.n	8000a84 <create_chain+0x94>
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d101      	bne.n	8000a88 <create_chain+0x98>
			return cs;
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	e038      	b.n	8000afa <create_chain+0x10a>
		if (ncl == scl) return 0;		/* No free cluster */
 8000a88:	697a      	ldr	r2, [r7, #20]
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d1da      	bne.n	8000a46 <create_chain+0x56>
 8000a90:	2300      	movs	r3, #0
 8000a92:	e032      	b.n	8000afa <create_chain+0x10a>
		if (cs == 0) break;				/* Found a free cluster */
 8000a94:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8000a96:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8000a9a:	6979      	ldr	r1, [r7, #20]
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f7ff fe58 	bl	8000752 <put_fat>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8000aa6:	7bfb      	ldrb	r3, [r7, #15]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d109      	bne.n	8000ac0 <create_chain+0xd0>
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d006      	beq.n	8000ac0 <create_chain+0xd0>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8000ab2:	697a      	ldr	r2, [r7, #20]
 8000ab4:	6839      	ldr	r1, [r7, #0]
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f7ff fe4b 	bl	8000752 <put_fat>
 8000abc:	4603      	mov	r3, r0
 8000abe:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8000ac0:	7bfb      	ldrb	r3, [r7, #15]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d110      	bne.n	8000ae8 <create_chain+0xf8>
		fs->last_clust = ncl;			/* Update FSINFO */
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	697a      	ldr	r2, [r7, #20]
 8000aca:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	691b      	ldr	r3, [r3, #16]
 8000ad0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ad4:	d010      	beq.n	8000af8 <create_chain+0x108>
			fs->free_clust--;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	691b      	ldr	r3, [r3, #16]
 8000ada:	1e5a      	subs	r2, r3, #1
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	715a      	strb	r2, [r3, #5]
 8000ae6:	e007      	b.n	8000af8 <create_chain+0x108>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8000ae8:	7bfb      	ldrb	r3, [r7, #15]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d102      	bne.n	8000af4 <create_chain+0x104>
 8000aee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000af2:	e000      	b.n	8000af6 <create_chain+0x106>
 8000af4:	2301      	movs	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8000af8:	697b      	ldr	r3, [r7, #20]
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b084      	sub	sp, #16
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
 8000b0a:	460b      	mov	r3, r1
 8000b0c:	807b      	strh	r3, [r7, #2]
	DWORD clst;
	WORD ic;


	dj->index = idx;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	887a      	ldrh	r2, [r7, #2]
 8000b12:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d005      	beq.n	8000b2c <dir_sdi+0x2a>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	699a      	ldr	r2, [r3, #24]
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d801      	bhi.n	8000b30 <dir_sdi+0x2e>
		return FR_INT_ERR;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	e066      	b.n	8000bfe <dir_sdi+0xfc>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d108      	bne.n	8000b48 <dir_sdi+0x46>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b03      	cmp	r3, #3
 8000b3e:	d103      	bne.n	8000b48 <dir_sdi+0x46>
		clst = dj->fs->dirbase;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b46:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d114      	bne.n	8000b78 <dir_sdi+0x76>
		dj->clust = clst;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	68fa      	ldr	r2, [r7, #12]
 8000b52:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	891b      	ldrh	r3, [r3, #8]
 8000b5a:	887a      	ldrh	r2, [r7, #2]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d301      	bcc.n	8000b64 <dir_sdi+0x62>
			return FR_INT_ERR;
 8000b60:	2302      	movs	r3, #2
 8000b62:	e04c      	b.n	8000bfe <dir_sdi+0xfc>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b6a:	887a      	ldrh	r2, [r7, #2]
 8000b6c:	0912      	lsrs	r2, r2, #4
 8000b6e:	b292      	uxth	r2, r2
 8000b70:	441a      	add	r2, r3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	611a      	str	r2, [r3, #16]
 8000b76:	e036      	b.n	8000be6 <dir_sdi+0xe4>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	789b      	ldrb	r3, [r3, #2]
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	011b      	lsls	r3, r3, #4
 8000b82:	817b      	strh	r3, [r7, #10]
		while (idx >= ic) {	/* Follow cluster chain */
 8000b84:	e01b      	b.n	8000bbe <dir_sdi+0xbc>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	68f9      	ldr	r1, [r7, #12]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff fd31 	bl	80005f4 <get_fat>
 8000b92:	60f8      	str	r0, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b9a:	d101      	bne.n	8000ba0 <dir_sdi+0x9e>
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	e02e      	b.n	8000bfe <dir_sdi+0xfc>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d905      	bls.n	8000bb2 <dir_sdi+0xb0>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	699a      	ldr	r2, [r3, #24]
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d801      	bhi.n	8000bb6 <dir_sdi+0xb4>
				return FR_INT_ERR;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	e023      	b.n	8000bfe <dir_sdi+0xfc>
			idx -= ic;
 8000bb6:	887a      	ldrh	r2, [r7, #2]
 8000bb8:	897b      	ldrh	r3, [r7, #10]
 8000bba:	1ad3      	subs	r3, r2, r3
 8000bbc:	807b      	strh	r3, [r7, #2]
		while (idx >= ic) {	/* Follow cluster chain */
 8000bbe:	887a      	ldrh	r2, [r7, #2]
 8000bc0:	897b      	ldrh	r3, [r7, #10]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d2df      	bcs.n	8000b86 <dir_sdi+0x84>
		}
		dj->clust = clst;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	68fa      	ldr	r2, [r7, #12]
 8000bca:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	68f9      	ldr	r1, [r7, #12]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fcef 	bl	80005b6 <clust2sect>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	887b      	ldrh	r3, [r7, #2]
 8000bdc:	091b      	lsrs	r3, r3, #4
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	441a      	add	r2, r3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8000bee:	887b      	ldrh	r3, [r7, #2]
 8000bf0:	f003 030f 	and.w	r3, r3, #15
 8000bf4:	015b      	lsls	r3, r3, #5
 8000bf6:	441a      	add	r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8000c06:	b590      	push	{r4, r7, lr}
 8000c08:	b085      	sub	sp, #20
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
 8000c0e:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	i = dj->index + 1;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	88db      	ldrh	r3, [r3, #6]
 8000c14:	3301      	adds	r3, #1
 8000c16:	813b      	strh	r3, [r7, #8]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 8000c18:	893b      	ldrh	r3, [r7, #8]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d003      	beq.n	8000c26 <dir_next+0x20>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	691b      	ldr	r3, [r3, #16]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d101      	bne.n	8000c2a <dir_next+0x24>
		return FR_NO_FILE;
 8000c26:	2304      	movs	r3, #4
 8000c28:	e0bd      	b.n	8000da6 <dir_next+0x1a0>

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
 8000c2a:	893b      	ldrh	r3, [r7, #8]
 8000c2c:	f003 030f 	and.w	r3, r3, #15
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 80a8 	bne.w	8000d88 <dir_next+0x182>
		dj->sect++;					/* Next sector */
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	691b      	ldr	r3, [r3, #16]
 8000c3c:	1c5a      	adds	r2, r3, #1
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	68db      	ldr	r3, [r3, #12]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d108      	bne.n	8000c5c <dir_next+0x56>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	891b      	ldrh	r3, [r3, #8]
 8000c50:	893a      	ldrh	r2, [r7, #8]
 8000c52:	429a      	cmp	r2, r3
 8000c54:	f0c0 8098 	bcc.w	8000d88 <dir_next+0x182>
				return FR_NO_FILE;
 8000c58:	2304      	movs	r3, #4
 8000c5a:	e0a4      	b.n	8000da6 <dir_next+0x1a0>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8000c5c:	893b      	ldrh	r3, [r7, #8]
 8000c5e:	091b      	lsrs	r3, r3, #4
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	461a      	mov	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	789b      	ldrb	r3, [r3, #2]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	f040 808a 	bne.w	8000d88 <dir_next+0x182>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4610      	mov	r0, r2
 8000c80:	f7ff fcb8 	bl	80005f4 <get_fat>
 8000c84:	60f8      	str	r0, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d801      	bhi.n	8000c90 <dir_next+0x8a>
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	e08a      	b.n	8000da6 <dir_next+0x1a0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c96:	d101      	bne.n	8000c9c <dir_next+0x96>
 8000c98:	2301      	movs	r3, #1
 8000c9a:	e084      	b.n	8000da6 <dir_next+0x1a0>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	699a      	ldr	r2, [r3, #24]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d863      	bhi.n	8000d70 <dir_next+0x16a>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d101      	bne.n	8000cb2 <dir_next+0xac>
 8000cae:	2304      	movs	r3, #4
 8000cb0:	e079      	b.n	8000da6 <dir_next+0x1a0>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	68db      	ldr	r3, [r3, #12]
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	f7ff fe97 	bl	80009f0 <create_chain>
 8000cc2:	60f8      	str	r0, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d101      	bne.n	8000cce <dir_next+0xc8>
 8000cca:	2307      	movs	r3, #7
 8000ccc:	e06b      	b.n	8000da6 <dir_next+0x1a0>
					if (clst == 1) return FR_INT_ERR;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d101      	bne.n	8000cd8 <dir_next+0xd2>
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	e066      	b.n	8000da6 <dir_next+0x1a0>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cde:	d101      	bne.n	8000ce4 <dir_next+0xde>
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e060      	b.n	8000da6 <dir_next+0x1a0>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fb68 	bl	80003c0 <move_window>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <dir_next+0xf4>
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e055      	b.n	8000da6 <dir_next+0x1a0>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	3330      	adds	r3, #48	; 0x30
 8000d00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d04:	2100      	movs	r1, #0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fafe 	bl	8000308 <mem_set>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681c      	ldr	r4, [r3, #0]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	68f9      	ldr	r1, [r7, #12]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fc4d 	bl	80005b6 <clust2sect>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8000d20:	2300      	movs	r3, #0
 8000d22:	72fb      	strb	r3, [r7, #11]
 8000d24:	e016      	b.n	8000d54 <dir_next+0x14e>
						dj->fs->wflag = 1;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	2100      	movs	r1, #0
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fb43 	bl	80003c0 <move_window>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <dir_next+0x13e>
 8000d40:	2301      	movs	r3, #1
 8000d42:	e030      	b.n	8000da6 <dir_next+0x1a0>
						dj->fs->winsect++;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d4a:	3201      	adds	r2, #1
 8000d4c:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8000d4e:	7afb      	ldrb	r3, [r7, #11]
 8000d50:	3301      	adds	r3, #1
 8000d52:	72fb      	strb	r3, [r7, #11]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	789b      	ldrb	r3, [r3, #2]
 8000d5a:	7afa      	ldrb	r2, [r7, #11]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d3e2      	bcc.n	8000d26 <dir_next+0x120>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	6812      	ldr	r2, [r2, #0]
 8000d68:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000d6a:	7afa      	ldrb	r2, [r7, #11]
 8000d6c:	1a8a      	subs	r2, r1, r2
 8000d6e:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	68f9      	ldr	r1, [r7, #12]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fc1a 	bl	80005b6 <clust2sect>
 8000d82:	4602      	mov	r2, r0
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	893a      	ldrh	r2, [r7, #8]
 8000d8c:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8000d96:	893b      	ldrh	r3, [r7, #8]
 8000d98:	f003 030f 	and.w	r3, r3, #15
 8000d9c:	015b      	lsls	r3, r3, #5
 8000d9e:	441a      	add	r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	615a      	str	r2, [r3, #20]

	return FR_OK;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3714      	adds	r7, #20
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd90      	pop	{r4, r7, pc}

08000dae <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b086      	sub	sp, #24
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
 8000db6:	2100      	movs	r1, #0
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff fea2 	bl	8000b02 <dir_sdi>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8000dc2:	7dfb      	ldrb	r3, [r7, #23]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <dir_find+0x1e>
 8000dc8:	7dfb      	ldrb	r3, [r7, #23]
 8000dca:	e037      	b.n	8000e3c <dir_find+0x8e>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	691b      	ldr	r3, [r3, #16]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4610      	mov	r0, r2
 8000dd8:	f7ff faf2 	bl	80003c0 <move_window>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8000de0:	7dfb      	ldrb	r3, [r7, #23]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d126      	bne.n	8000e34 <dir_find+0x86>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8000df2:	7bfb      	ldrb	r3, [r7, #15]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d102      	bne.n	8000dfe <dir_find+0x50>
 8000df8:	2304      	movs	r3, #4
 8000dfa:	75fb      	strb	r3, [r7, #23]
 8000dfc:	e01d      	b.n	8000e3a <dir_find+0x8c>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	330b      	adds	r3, #11
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	f003 0308 	and.w	r3, r3, #8
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d109      	bne.n	8000e20 <dir_find+0x72>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	220b      	movs	r2, #11
 8000e12:	4619      	mov	r1, r3
 8000e14:	6938      	ldr	r0, [r7, #16]
 8000e16:	f7ff fa91 	bl	800033c <mem_cmp>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d00b      	beq.n	8000e38 <dir_find+0x8a>
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
 8000e20:	2100      	movs	r1, #0
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff feef 	bl	8000c06 <dir_next>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8000e2c:	7dfb      	ldrb	r3, [r7, #23]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d0cc      	beq.n	8000dcc <dir_find+0x1e>
 8000e32:	e002      	b.n	8000e3a <dir_find+0x8c>
		if (res != FR_OK) break;
 8000e34:	bf00      	nop
 8000e36:	e000      	b.n	8000e3a <dir_find+0x8c>
			break;
 8000e38:	bf00      	nop

	return res;
 8000e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_sdi(dj, 0);
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f7ff fe57 	bl	8000b02 <dir_sdi>
 8000e54:	4603      	mov	r3, r0
 8000e56:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d121      	bne.n	8000ea2 <dir_register+0x5e>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	691b      	ldr	r3, [r3, #16]
 8000e66:	4619      	mov	r1, r3
 8000e68:	4610      	mov	r0, r2
 8000e6a:	f7ff faa9 	bl	80003c0 <move_window>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d113      	bne.n	8000ea0 <dir_register+0x5c>
			c = *dj->dir;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	695b      	ldr	r3, [r3, #20]
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	73bb      	strb	r3, [r7, #14]
			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
 8000e80:	7bbb      	ldrb	r3, [r7, #14]
 8000e82:	2be5      	cmp	r3, #229	; 0xe5
 8000e84:	d00d      	beq.n	8000ea2 <dir_register+0x5e>
 8000e86:	7bbb      	ldrb	r3, [r7, #14]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d00a      	beq.n	8000ea2 <dir_register+0x5e>
			res = dir_next(dj, 1);			/* Next entry with table stretch */
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff feb9 	bl	8000c06 <dir_next>
 8000e94:	4603      	mov	r3, r0
 8000e96:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8000e98:	7bfb      	ldrb	r3, [r7, #15]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d0df      	beq.n	8000e5e <dir_register+0x1a>
 8000e9e:	e000      	b.n	8000ea2 <dir_register+0x5e>
			if (res != FR_OK) break;
 8000ea0:	bf00      	nop
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d11f      	bne.n	8000ee8 <dir_register+0xa4>
		res = move_window(dj->fs, dj->sect);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	691b      	ldr	r3, [r3, #16]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4610      	mov	r0, r2
 8000eb4:	f7ff fa84 	bl	80003c0 <move_window>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d112      	bne.n	8000ee8 <dir_register+0xa4>
			dir = dj->dir;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	60bb      	str	r3, [r7, #8]
			mem_set(dir, 0, 32);		/* Clean the entry */
 8000ec8:	2220      	movs	r2, #32
 8000eca:	2100      	movs	r1, #0
 8000ecc:	68b8      	ldr	r0, [r7, #8]
 8000ece:	f7ff fa1b 	bl	8000308 <mem_set>
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	699b      	ldr	r3, [r3, #24]
 8000ed6:	220b      	movs	r2, #11
 8000ed8:	4619      	mov	r1, r3
 8000eda:	68b8      	ldr	r0, [r7, #8]
 8000edc:	f7ff f9f6 	bl	80002cc <mem_cpy>
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dj->fs->wflag = 1;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	60fb      	str	r3, [r7, #12]
	mem_set(sfn, ' ', 11);
 8000f04:	220b      	movs	r2, #11
 8000f06:	2120      	movs	r1, #32
 8000f08:	68f8      	ldr	r0, [r7, #12]
 8000f0a:	f7ff f9fd 	bl	8000308 <mem_set>
	si = i = b = 0; ni = 8;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	77fb      	strb	r3, [r7, #31]
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	617b      	str	r3, [r7, #20]
 8000f1a:	2308      	movs	r3, #8
 8000f1c:	61bb      	str	r3, [r7, #24]
	p = *path;
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	60bb      	str	r3, [r7, #8]
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	1c5a      	adds	r2, r3, #1
 8000f28:	617a      	str	r2, [r7, #20]
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8000f32:	7fbb      	ldrb	r3, [r7, #30]
 8000f34:	2b20      	cmp	r3, #32
 8000f36:	d953      	bls.n	8000fe0 <create_name+0xec>
 8000f38:	7fbb      	ldrb	r3, [r7, #30]
 8000f3a:	2b2f      	cmp	r3, #47	; 0x2f
 8000f3c:	d050      	beq.n	8000fe0 <create_name+0xec>
 8000f3e:	7fbb      	ldrb	r3, [r7, #30]
 8000f40:	2b5c      	cmp	r3, #92	; 0x5c
 8000f42:	d04d      	beq.n	8000fe0 <create_name+0xec>
		if (c == '.' || i >= ni) {
 8000f44:	7fbb      	ldrb	r3, [r7, #30]
 8000f46:	2b2e      	cmp	r3, #46	; 0x2e
 8000f48:	d003      	beq.n	8000f52 <create_name+0x5e>
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d30f      	bcc.n	8000f72 <create_name+0x7e>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	2b08      	cmp	r3, #8
 8000f56:	d102      	bne.n	8000f5e <create_name+0x6a>
 8000f58:	7fbb      	ldrb	r3, [r7, #30]
 8000f5a:	2b2e      	cmp	r3, #46	; 0x2e
 8000f5c:	d001      	beq.n	8000f62 <create_name+0x6e>
 8000f5e:	2306      	movs	r3, #6
 8000f60:	e073      	b.n	800104a <create_name+0x156>
			i = 8; ni = 11;
 8000f62:	2308      	movs	r3, #8
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	230b      	movs	r3, #11
 8000f68:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8000f6a:	7ffb      	ldrb	r3, [r7, #31]
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	77fb      	strb	r3, [r7, #31]
 8000f70:	e035      	b.n	8000fde <create_name+0xea>
		}
		if (c >= 0x80) {				/* Extended char? */
 8000f72:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	da08      	bge.n	8000f8c <create_name+0x98>
			b |= 3;						/* Eliminate NT flag */
 8000f7a:	7ffb      	ldrb	r3, [r7, #31]
 8000f7c:	f043 0303 	orr.w	r3, r3, #3
 8000f80:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = excvt[c-0x80];			/* Upper conversion (SBCS) */
 8000f82:	7fbb      	ldrb	r3, [r7, #30]
 8000f84:	3b80      	subs	r3, #128	; 0x80
 8000f86:	4a33      	ldr	r2, [pc, #204]	; (8001054 <create_name+0x160>)
 8000f88:	5cd3      	ldrb	r3, [r2, r3]
 8000f8a:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8000f8c:	7fbb      	ldrb	r3, [r7, #30]
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4831      	ldr	r0, [pc, #196]	; (8001058 <create_name+0x164>)
 8000f92:	f7ff f9fa 	bl	800038a <chk_chr>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <create_name+0xac>
				return FR_INVALID_NAME;
 8000f9c:	2306      	movs	r3, #6
 8000f9e:	e054      	b.n	800104a <create_name+0x156>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8000fa0:	7fbb      	ldrb	r3, [r7, #30]
 8000fa2:	2b40      	cmp	r3, #64	; 0x40
 8000fa4:	d907      	bls.n	8000fb6 <create_name+0xc2>
 8000fa6:	7fbb      	ldrb	r3, [r7, #30]
 8000fa8:	2b5a      	cmp	r3, #90	; 0x5a
 8000faa:	d804      	bhi.n	8000fb6 <create_name+0xc2>
				b |= 2;
 8000fac:	7ffb      	ldrb	r3, [r7, #31]
 8000fae:	f043 0302 	orr.w	r3, r3, #2
 8000fb2:	77fb      	strb	r3, [r7, #31]
 8000fb4:	e00c      	b.n	8000fd0 <create_name+0xdc>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8000fb6:	7fbb      	ldrb	r3, [r7, #30]
 8000fb8:	2b60      	cmp	r3, #96	; 0x60
 8000fba:	d909      	bls.n	8000fd0 <create_name+0xdc>
 8000fbc:	7fbb      	ldrb	r3, [r7, #30]
 8000fbe:	2b7a      	cmp	r3, #122	; 0x7a
 8000fc0:	d806      	bhi.n	8000fd0 <create_name+0xdc>
					b |= 1; c -= 0x20;
 8000fc2:	7ffb      	ldrb	r3, [r7, #31]
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	77fb      	strb	r3, [r7, #31]
 8000fca:	7fbb      	ldrb	r3, [r7, #30]
 8000fcc:	3b20      	subs	r3, #32
 8000fce:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	1c5a      	adds	r2, r3, #1
 8000fd4:	613a      	str	r2, [r7, #16]
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	4413      	add	r3, r2
 8000fda:	7fba      	ldrb	r2, [r7, #30]
 8000fdc:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8000fde:	e7a1      	b.n	8000f24 <create_name+0x30>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8000fe0:	68ba      	ldr	r2, [r7, #8]
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	441a      	add	r2, r3
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8000fea:	7fbb      	ldrb	r3, [r7, #30]
 8000fec:	2b20      	cmp	r3, #32
 8000fee:	d801      	bhi.n	8000ff4 <create_name+0x100>
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	e000      	b.n	8000ff6 <create_name+0x102>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d101      	bne.n	8001002 <create_name+0x10e>
 8000ffe:	2306      	movs	r3, #6
 8001000:	e023      	b.n	800104a <create_name+0x156>
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2be5      	cmp	r3, #229	; 0xe5
 8001008:	d102      	bne.n	8001010 <create_name+0x11c>
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2205      	movs	r2, #5
 800100e:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	2b08      	cmp	r3, #8
 8001014:	d102      	bne.n	800101c <create_name+0x128>
 8001016:	7ffb      	ldrb	r3, [r7, #31]
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800101c:	7ffb      	ldrb	r3, [r7, #31]
 800101e:	f003 0303 	and.w	r3, r3, #3
 8001022:	2b01      	cmp	r3, #1
 8001024:	d103      	bne.n	800102e <create_name+0x13a>
 8001026:	7fbb      	ldrb	r3, [r7, #30]
 8001028:	f043 0310 	orr.w	r3, r3, #16
 800102c:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800102e:	7ffb      	ldrb	r3, [r7, #31]
 8001030:	f003 030c 	and.w	r3, r3, #12
 8001034:	2b04      	cmp	r3, #4
 8001036:	d103      	bne.n	8001040 <create_name+0x14c>
 8001038:	7fbb      	ldrb	r3, [r7, #30]
 800103a:	f043 0308 	orr.w	r3, r3, #8
 800103e:	77bb      	strb	r3, [r7, #30]

	sfn[NS] = c;		/* Store NT flag, File name is created */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	330b      	adds	r3, #11
 8001044:	7fba      	ldrb	r2, [r7, #30]
 8001046:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8001048:	2300      	movs	r3, #0
#endif
}
 800104a:	4618      	mov	r0, r3
 800104c:	3720      	adds	r7, #32
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	08003474 	.word	0x08003474
 8001058:	0800345c 	.word	0x0800345c

0800105c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b2f      	cmp	r3, #47	; 0x2f
 800106c:	d003      	beq.n	8001076 <follow_path+0x1a>
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b5c      	cmp	r3, #92	; 0x5c
 8001074:	d102      	bne.n	800107c <follow_path+0x20>
		path++;
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	3301      	adds	r3, #1
 800107a:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b1f      	cmp	r3, #31
 8001088:	d809      	bhi.n	800109e <follow_path+0x42>
		res = dir_sdi(dj, 0);
 800108a:	2100      	movs	r1, #0
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff fd38 	bl	8000b02 <dir_sdi>
 8001092:	4603      	mov	r3, r0
 8001094:	73fb      	strb	r3, [r7, #15]
		dj->dir = 0;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	615a      	str	r2, [r3, #20]
 800109c:	e056      	b.n	800114c <follow_path+0xf0>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
 800109e:	463b      	mov	r3, r7
 80010a0:	4619      	mov	r1, r3
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff ff26 	bl	8000ef4 <create_name>
 80010a8:	4603      	mov	r3, r0
 80010aa:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d145      	bne.n	800113e <follow_path+0xe2>
			res = dir_find(dj);				/* Find it */
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff fe7b 	bl	8000dae <dir_find>
 80010b8:	4603      	mov	r3, r0
 80010ba:	73fb      	strb	r3, [r7, #15]
			ns = *(dj->fn+NS);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	7adb      	ldrb	r3, [r3, #11]
 80010c2:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d00a      	beq.n	80010e0 <follow_path+0x84>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
 80010cc:	2b04      	cmp	r3, #4
 80010ce:	d138      	bne.n	8001142 <follow_path+0xe6>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
 80010d0:	7bbb      	ldrb	r3, [r7, #14]
 80010d2:	f003 0304 	and.w	r3, r3, #4
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d135      	bne.n	8001146 <follow_path+0xea>
 80010da:	2305      	movs	r3, #5
 80010dc:	73fb      	strb	r3, [r7, #15]
				}
				break;
 80010de:	e032      	b.n	8001146 <follow_path+0xea>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
 80010e0:	7bbb      	ldrb	r3, [r7, #14]
 80010e2:	f003 0304 	and.w	r3, r3, #4
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d12f      	bne.n	800114a <follow_path+0xee>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	330b      	adds	r3, #11
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	f003 0310 	and.w	r3, r3, #16
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d102      	bne.n	8001104 <follow_path+0xa8>
				res = FR_NO_PATH; break;
 80010fe:	2305      	movs	r3, #5
 8001100:	73fb      	strb	r3, [r7, #15]
 8001102:	e023      	b.n	800114c <follow_path+0xf0>
			}
			dj->sclust = LD_CLUST(dir);
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	3315      	adds	r3, #21
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	021b      	lsls	r3, r3, #8
 800110c:	b21a      	sxth	r2, r3
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	3314      	adds	r3, #20
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	b21b      	sxth	r3, r3
 8001116:	4313      	orrs	r3, r2
 8001118:	b21b      	sxth	r3, r3
 800111a:	b29b      	uxth	r3, r3
 800111c:	041b      	lsls	r3, r3, #16
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	321b      	adds	r2, #27
 8001122:	7812      	ldrb	r2, [r2, #0]
 8001124:	0212      	lsls	r2, r2, #8
 8001126:	b211      	sxth	r1, r2
 8001128:	68ba      	ldr	r2, [r7, #8]
 800112a:	321a      	adds	r2, #26
 800112c:	7812      	ldrb	r2, [r2, #0]
 800112e:	b212      	sxth	r2, r2
 8001130:	430a      	orrs	r2, r1
 8001132:	b212      	sxth	r2, r2
 8001134:	b292      	uxth	r2, r2
 8001136:	431a      	orrs	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
 800113c:	e7af      	b.n	800109e <follow_path+0x42>
			if (res != FR_OK) break;
 800113e:	bf00      	nop
 8001140:	e004      	b.n	800114c <follow_path+0xf0>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
 8001142:	bf00      	nop
 8001144:	e002      	b.n	800114c <follow_path+0xf0>
				break;
 8001146:	bf00      	nop
 8001148:	e000      	b.n	800114c <follow_path+0xf0>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
 800114a:	bf00      	nop
		}
	}

	return res;
 800114c:	7bfb      	ldrb	r3, [r7, #15]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT BR, 1:Valid BR but not an FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	7858      	ldrb	r0, [r3, #1]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800116c:	2301      	movs	r3, #1
 800116e:	683a      	ldr	r2, [r7, #0]
 8001170:	f001 f990 	bl	8002494 <disk_read>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <check_fs+0x26>
		return 3;
 800117a:	2303      	movs	r3, #3
 800117c:	e04a      	b.n	8001214 <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f203 232e 	addw	r3, r3, #558	; 0x22e
 8001184:	3301      	adds	r3, #1
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	021b      	lsls	r3, r3, #8
 800118a:	b21a      	sxth	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f893 322e 	ldrb.w	r3, [r3, #558]	; 0x22e
 8001192:	b21b      	sxth	r3, r3
 8001194:	4313      	orrs	r3, r2
 8001196:	b21b      	sxth	r3, r3
 8001198:	4a20      	ldr	r2, [pc, #128]	; (800121c <check_fs+0xc4>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d001      	beq.n	80011a2 <check_fs+0x4a>
		return 2;
 800119e:	2302      	movs	r3, #2
 80011a0:	e038      	b.n	8001214 <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3366      	adds	r3, #102	; 0x66
 80011a6:	3303      	adds	r3, #3
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	061a      	lsls	r2, r3, #24
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3366      	adds	r3, #102	; 0x66
 80011b0:	3302      	adds	r3, #2
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	041b      	lsls	r3, r3, #16
 80011b6:	4313      	orrs	r3, r2
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	3266      	adds	r2, #102	; 0x66
 80011bc:	3201      	adds	r2, #1
 80011be:	7812      	ldrb	r2, [r2, #0]
 80011c0:	0212      	lsls	r2, r2, #8
 80011c2:	4313      	orrs	r3, r2
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	f892 2066 	ldrb.w	r2, [r2, #102]	; 0x66
 80011ca:	4313      	orrs	r3, r2
 80011cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80011d0:	4a13      	ldr	r2, [pc, #76]	; (8001220 <check_fs+0xc8>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d101      	bne.n	80011da <check_fs+0x82>
		return 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	e01c      	b.n	8001214 <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3382      	adds	r3, #130	; 0x82
 80011de:	3303      	adds	r3, #3
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	061a      	lsls	r2, r3, #24
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3382      	adds	r3, #130	; 0x82
 80011e8:	3302      	adds	r3, #2
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	041b      	lsls	r3, r3, #16
 80011ee:	4313      	orrs	r3, r2
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	3282      	adds	r2, #130	; 0x82
 80011f4:	3201      	adds	r2, #1
 80011f6:	7812      	ldrb	r2, [r2, #0]
 80011f8:	0212      	lsls	r2, r2, #8
 80011fa:	4313      	orrs	r3, r2
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	f892 2082 	ldrb.w	r2, [r2, #130]	; 0x82
 8001202:	4313      	orrs	r3, r2
 8001204:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001208:	4a05      	ldr	r2, [pc, #20]	; (8001220 <check_fs+0xc8>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d101      	bne.n	8001212 <check_fs+0xba>
		return 0;
 800120e:	2300      	movs	r3, #0
 8001210:	e000      	b.n	8001214 <check_fs+0xbc>

	return 1;
 8001212:	2301      	movs	r3, #1
}
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	ffffaa55 	.word	0xffffaa55
 8001220:	00544146 	.word	0x00544146

08001224 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b092      	sub	sp, #72	; 0x48
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	4613      	mov	r3, r2
 8001230:	71fb      	strb	r3, [r7, #7]
	BYTE fmt, b, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
 8001238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	3b30      	subs	r3, #48	; 0x30
 800123e:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
 8001240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001242:	2b09      	cmp	r3, #9
 8001244:	d80b      	bhi.n	800125e <chk_mounted+0x3a>
 8001246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001248:	3301      	adds	r3, #1
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b3a      	cmp	r3, #58	; 0x3a
 800124e:	d106      	bne.n	800125e <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
 8001250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001252:	3302      	adds	r3, #2
 8001254:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	e001      	b.n	8001262 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
 800125e:	2300      	movs	r3, #0
 8001260:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
 8001262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
 8001268:	230b      	movs	r3, #11
 800126a:	e25f      	b.n	800172c <chk_mounted+0x508>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
 800126c:	4aa6      	ldr	r2, [pc, #664]	; (8001508 <chk_mounted+0x2e4>)
 800126e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001274:	62bb      	str	r3, [r7, #40]	; 0x28
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800127a:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800127c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <chk_mounted+0x62>
 8001282:	230c      	movs	r3, #12
 8001284:	e252      	b.n	800172c <chk_mounted+0x508>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
 8001286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d01a      	beq.n	80012c4 <chk_mounted+0xa0>
		stat = disk_status(fs->drv);
 800128e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001290:	785b      	ldrb	r3, [r3, #1]
 8001292:	4618      	mov	r0, r3
 8001294:	f001 f8e8 	bl	8002468 <disk_status>
 8001298:	4603      	mov	r3, r0
 800129a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
 800129e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d10c      	bne.n	80012c4 <chk_mounted+0xa0>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d007      	beq.n	80012c0 <chk_mounted+0x9c>
 80012b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <chk_mounted+0x9c>
				return FR_WRITE_PROTECTED;
 80012bc:	230a      	movs	r3, #10
 80012be:	e235      	b.n	800172c <chk_mounted+0x508>
#endif
			return FR_OK;				/* The file system object is valid */
 80012c0:	2300      	movs	r3, #0
 80012c2:	e233      	b.n	800172c <chk_mounted+0x508>
	}

	/* The logical drive must be mounted. */
	/* Following code attempts to mount a volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80012c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
	fs->drv = (BYTE)LD2PD(vol);			/* Bind the logical drive and a physical drive */
 80012ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d0:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
 80012d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d4:	785b      	ldrb	r3, [r3, #1]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 ffa8 	bl	800222c <disk_initialize>
 80012dc:	4603      	mov	r3, r0
 80012de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80012e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <chk_mounted+0xce>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
 80012ee:	2303      	movs	r3, #3
 80012f0:	e21c      	b.n	800172c <chk_mounted+0x508>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d007      	beq.n	8001308 <chk_mounted+0xe4>
 80012f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012fc:	f003 0304 	and.w	r3, r3, #4
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <chk_mounted+0xe4>
		return FR_WRITE_PROTECTED;
 8001304:	230a      	movs	r3, #10
 8001306:	e211      	b.n	800172c <chk_mounted+0x508>
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 if it is a VBR */
 8001308:	2300      	movs	r3, #0
 800130a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800130c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800130e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001310:	f7ff ff22 	bl	8001158 <check_fs>
 8001314:	4603      	mov	r3, r0
 8001316:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (fmt == 1) {						/* Not an FAT-VBR, the disk may be partitioned */
 800131a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800131e:	2b01      	cmp	r3, #1
 8001320:	d122      	bne.n	8001368 <chk_mounted+0x144>
		/* Check the partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
 8001322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001324:	f503 73f7 	add.w	r3, r3, #494	; 0x1ee
 8001328:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {									/* Is the partition existing? */
 800132a:	6a3b      	ldr	r3, [r7, #32]
 800132c:	3304      	adds	r3, #4
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d019      	beq.n	8001368 <chk_mounted+0x144>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
 8001334:	6a3b      	ldr	r3, [r7, #32]
 8001336:	330b      	adds	r3, #11
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	061a      	lsls	r2, r3, #24
 800133c:	6a3b      	ldr	r3, [r7, #32]
 800133e:	330a      	adds	r3, #10
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	041b      	lsls	r3, r3, #16
 8001344:	4313      	orrs	r3, r2
 8001346:	6a3a      	ldr	r2, [r7, #32]
 8001348:	3209      	adds	r2, #9
 800134a:	7812      	ldrb	r2, [r2, #0]
 800134c:	0212      	lsls	r2, r2, #8
 800134e:	4313      	orrs	r3, r2
 8001350:	6a3a      	ldr	r2, [r7, #32]
 8001352:	3208      	adds	r2, #8
 8001354:	7812      	ldrb	r2, [r2, #0]
 8001356:	4313      	orrs	r3, r2
 8001358:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);					/* Check the partition */
 800135a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800135c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800135e:	f7ff fefb 	bl	8001158 <check_fs>
 8001362:	4603      	mov	r3, r0
 8001364:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
 8001368:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800136c:	2b03      	cmp	r3, #3
 800136e:	d101      	bne.n	8001374 <chk_mounted+0x150>
 8001370:	2301      	movs	r3, #1
 8001372:	e1db      	b.n	800172c <chk_mounted+0x508>
	if (fmt) return FR_NO_FILESYSTEM;					/* No FAT volume is found */
 8001374:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <chk_mounted+0x15c>
 800137c:	230d      	movs	r3, #13
 800137e:	e1d5      	b.n	800172c <chk_mounted+0x508>

	/* Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8001380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001382:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001386:	021b      	lsls	r3, r3, #8
 8001388:	b21a      	sxth	r2, r3
 800138a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800138c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001390:	b21b      	sxth	r3, r3
 8001392:	4313      	orrs	r3, r2
 8001394:	b21b      	sxth	r3, r3
 8001396:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800139a:	d001      	beq.n	80013a0 <chk_mounted+0x17c>
		return FR_NO_FILESYSTEM;
 800139c:	230d      	movs	r3, #13
 800139e:	e1c5      	b.n	800172c <chk_mounted+0x508>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
 80013a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80013a6:	021b      	lsls	r3, r3, #8
 80013a8:	b21a      	sxth	r2, r3
 80013aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ac:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	4313      	orrs	r3, r2
 80013b4:	b21b      	sxth	r3, r3
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
 80013ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d112      	bne.n	80013e6 <chk_mounted+0x1c2>
 80013c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c2:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80013c6:	061a      	lsls	r2, r3, #24
 80013c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ca:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80013ce:	041b      	lsls	r3, r3, #16
 80013d0:	4313      	orrs	r3, r2
 80013d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013d4:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80013d8:	0212      	lsls	r2, r2, #8
 80013da:	4313      	orrs	r3, r2
 80013dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013de:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80013e2:	4313      	orrs	r3, r2
 80013e4:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
 80013e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80013ea:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
 80013ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013f2:	77fb      	strb	r3, [r7, #31]
 80013f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f6:	7ffa      	ldrb	r2, [r7, #31]
 80013f8:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
 80013fa:	7ffb      	ldrb	r3, [r7, #31]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d004      	beq.n	800140a <chk_mounted+0x1e6>
 8001400:	7ffb      	ldrb	r3, [r7, #31]
 8001402:	2b02      	cmp	r3, #2
 8001404:	d001      	beq.n	800140a <chk_mounted+0x1e6>
 8001406:	230d      	movs	r3, #13
 8001408:	e190      	b.n	800172c <chk_mounted+0x508>
	fasize *= b;										/* Number of sectors for FAT area */
 800140a:	7ffa      	ldrb	r2, [r7, #31]
 800140c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800140e:	fb02 f303 	mul.w	r3, r2, r3
 8001412:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
 8001414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800141a:	77fb      	strb	r3, [r7, #31]
 800141c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800141e:	7ffa      	ldrb	r2, [r7, #31]
 8001420:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8001422:	7ffb      	ldrb	r3, [r7, #31]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d005      	beq.n	8001434 <chk_mounted+0x210>
 8001428:	7ffa      	ldrb	r2, [r7, #31]
 800142a:	7ffb      	ldrb	r3, [r7, #31]
 800142c:	3b01      	subs	r3, #1
 800142e:	4013      	ands	r3, r2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <chk_mounted+0x214>
 8001434:	230d      	movs	r3, #13
 8001436:	e179      	b.n	800172c <chk_mounted+0x508>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
 8001438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800143a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800143e:	021b      	lsls	r3, r3, #8
 8001440:	b21a      	sxth	r2, r3
 8001442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001444:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001448:	b21b      	sxth	r3, r3
 800144a:	4313      	orrs	r3, r2
 800144c:	b21b      	sxth	r3, r3
 800144e:	b29a      	uxth	r2, r3
 8001450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001452:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / 32)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
 8001454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001456:	891b      	ldrh	r3, [r3, #8]
 8001458:	f003 030f 	and.w	r3, r3, #15
 800145c:	b29b      	uxth	r3, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <chk_mounted+0x242>
 8001462:	230d      	movs	r3, #13
 8001464:	e162      	b.n	800172c <chk_mounted+0x508>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
 8001466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001468:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800146c:	021b      	lsls	r3, r3, #8
 800146e:	b21a      	sxth	r2, r3
 8001470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001472:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001476:	b21b      	sxth	r3, r3
 8001478:	4313      	orrs	r3, r2
 800147a:	b21b      	sxth	r3, r3
 800147c:	b29b      	uxth	r3, r3
 800147e:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 8001480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001482:	2b00      	cmp	r3, #0
 8001484:	d112      	bne.n	80014ac <chk_mounted+0x288>
 8001486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001488:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800148c:	061a      	lsls	r2, r3, #24
 800148e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001490:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8001494:	041b      	lsls	r3, r3, #16
 8001496:	4313      	orrs	r3, r2
 8001498:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800149a:	f892 2051 	ldrb.w	r2, [r2, #81]	; 0x51
 800149e:	0212      	lsls	r2, r2, #8
 80014a0:	4313      	orrs	r3, r2
 80014a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014a4:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 80014a8:	4313      	orrs	r3, r2
 80014aa:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
 80014ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ae:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80014b2:	021b      	lsls	r3, r3, #8
 80014b4:	b21a      	sxth	r2, r3
 80014b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80014bc:	b21b      	sxth	r3, r3
 80014be:	4313      	orrs	r3, r2
 80014c0:	b21b      	sxth	r3, r3
 80014c2:	83bb      	strh	r3, [r7, #28]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
 80014c4:	8bbb      	ldrh	r3, [r7, #28]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d101      	bne.n	80014ce <chk_mounted+0x2aa>
 80014ca:	230d      	movs	r3, #13
 80014cc:	e12e      	b.n	800172c <chk_mounted+0x508>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / 32);	/* RSV+FAT+DIR */
 80014ce:	8bba      	ldrh	r2, [r7, #28]
 80014d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014d2:	4413      	add	r3, r2
 80014d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014d6:	8912      	ldrh	r2, [r2, #8]
 80014d8:	0912      	lsrs	r2, r2, #4
 80014da:	b292      	uxth	r2, r2
 80014dc:	4413      	add	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80014e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d201      	bcs.n	80014ec <chk_mounted+0x2c8>
 80014e8:	230d      	movs	r3, #13
 80014ea:	e11f      	b.n	800172c <chk_mounted+0x508>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80014ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014f4:	7892      	ldrb	r2, [r2, #2]
 80014f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80014fa:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d104      	bne.n	800150c <chk_mounted+0x2e8>
 8001502:	230d      	movs	r3, #13
 8001504:	e112      	b.n	800172c <chk_mounted+0x508>
 8001506:	bf00      	nop
 8001508:	20005ebc 	.word	0x20005ebc
	fmt = FS_FAT12;
 800150c:	2301      	movs	r3, #1
 800150e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	f640 72f5 	movw	r2, #4085	; 0xff5
 8001518:	4293      	cmp	r3, r2
 800151a:	d902      	bls.n	8001522 <chk_mounted+0x2fe>
 800151c:	2302      	movs	r3, #2
 800151e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8001528:	4293      	cmp	r3, r2
 800152a:	d902      	bls.n	8001532 <chk_mounted+0x30e>
 800152c:	2303      	movs	r3, #3
 800152e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	1c9a      	adds	r2, r3, #2
 8001536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001538:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
 800153a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	441a      	add	r2, r3
 8001540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001542:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8001544:	8bba      	ldrh	r2, [r7, #28]
 8001546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001548:	441a      	add	r2, r3
 800154a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800154c:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
 800154e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001552:	2b03      	cmp	r3, #3
 8001554:	d11e      	bne.n	8001594 <chk_mounted+0x370>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8001556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001558:	891b      	ldrh	r3, [r3, #8]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <chk_mounted+0x33e>
 800155e:	230d      	movs	r3, #13
 8001560:	e0e4      	b.n	800172c <chk_mounted+0x508>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
 8001562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001564:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8001568:	061a      	lsls	r2, r3, #24
 800156a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800156c:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8001570:	041b      	lsls	r3, r3, #16
 8001572:	4313      	orrs	r3, r2
 8001574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001576:	f892 205d 	ldrb.w	r2, [r2, #93]	; 0x5d
 800157a:	0212      	lsls	r2, r2, #8
 800157c:	4313      	orrs	r3, r2
 800157e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001580:	f892 205c 	ldrb.w	r2, [r2, #92]	; 0x5c
 8001584:	431a      	orrs	r2, r3
 8001586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001588:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
 800158a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	633b      	str	r3, [r7, #48]	; 0x30
 8001592:	e01f      	b.n	80015d4 <chk_mounted+0x3b0>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8001594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001596:	891b      	ldrh	r3, [r3, #8]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d101      	bne.n	80015a0 <chk_mounted+0x37c>
 800159c:	230d      	movs	r3, #13
 800159e:	e0c5      	b.n	800172c <chk_mounted+0x508>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80015a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a2:	6a1a      	ldr	r2, [r3, #32]
 80015a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015a6:	441a      	add	r2, r3
 80015a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015aa:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80015ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d103      	bne.n	80015bc <chk_mounted+0x398>
 80015b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	e00a      	b.n	80015d2 <chk_mounted+0x3ae>
 80015bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015be:	699a      	ldr	r2, [r3, #24]
 80015c0:	4613      	mov	r3, r2
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	4413      	add	r3, r2
 80015c6:	085a      	lsrs	r2, r3, #1
 80015c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
 80015d2:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (FAT size must not be less than FAT sectors */
 80015d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d6:	69da      	ldr	r2, [r3, #28]
 80015d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015da:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80015de:	0a5b      	lsrs	r3, r3, #9
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d201      	bcs.n	80015e8 <chk_mounted+0x3c4>
		return FR_NO_FILESYSTEM;
 80015e4:	230d      	movs	r3, #13
 80015e6:	e0a1      	b.n	800172c <chk_mounted+0x508>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
 80015e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015ee:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
 80015f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f2:	2200      	movs	r2, #0
 80015f4:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
 80015f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80015fa:	2b03      	cmp	r3, #3
 80015fc:	f040 8081 	bne.w	8001702 <chk_mounted+0x4de>
	 	fs->fsi_flag = 0;
 8001600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001602:	2200      	movs	r2, #0
 8001604:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 8001606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001608:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800160c:	021b      	lsls	r3, r3, #8
 800160e:	b21a      	sxth	r2, r3
 8001610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001612:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8001616:	b21b      	sxth	r3, r3
 8001618:	4313      	orrs	r3, r2
 800161a:	b21b      	sxth	r3, r3
 800161c:	b29b      	uxth	r3, r3
 800161e:	461a      	mov	r2, r3
 8001620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001622:	441a      	add	r2, r3
 8001624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001626:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 8001628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800162a:	7858      	ldrb	r0, [r3, #1]
 800162c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800162e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001634:	695a      	ldr	r2, [r3, #20]
 8001636:	2301      	movs	r3, #1
 8001638:	f000 ff2c 	bl	8002494 <disk_read>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d15f      	bne.n	8001702 <chk_mounted+0x4de>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 8001642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001644:	f893 322f 	ldrb.w	r3, [r3, #559]	; 0x22f
 8001648:	021b      	lsls	r3, r3, #8
 800164a:	b21a      	sxth	r2, r3
 800164c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800164e:	f893 322e 	ldrb.w	r3, [r3, #558]	; 0x22e
 8001652:	b21b      	sxth	r3, r3
 8001654:	4313      	orrs	r3, r2
 8001656:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 8001658:	4a36      	ldr	r2, [pc, #216]	; (8001734 <chk_mounted+0x510>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d151      	bne.n	8001702 <chk_mounted+0x4de>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 800165e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001660:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001664:	061a      	lsls	r2, r3, #24
 8001666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001668:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800166c:	041b      	lsls	r3, r3, #16
 800166e:	4313      	orrs	r3, r2
 8001670:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001672:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 8001676:	0212      	lsls	r2, r2, #8
 8001678:	4313      	orrs	r3, r2
 800167a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800167c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8001680:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 8001682:	4a2d      	ldr	r2, [pc, #180]	; (8001738 <chk_mounted+0x514>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d13c      	bne.n	8001702 <chk_mounted+0x4de>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
 8001688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800168a:	f893 3217 	ldrb.w	r3, [r3, #535]	; 0x217
 800168e:	061a      	lsls	r2, r3, #24
 8001690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001692:	f893 3216 	ldrb.w	r3, [r3, #534]	; 0x216
 8001696:	041b      	lsls	r3, r3, #16
 8001698:	4313      	orrs	r3, r2
 800169a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800169c:	f892 2215 	ldrb.w	r2, [r2, #533]	; 0x215
 80016a0:	0212      	lsls	r2, r2, #8
 80016a2:	4313      	orrs	r3, r2
 80016a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016a6:	f892 2214 	ldrb.w	r2, [r2, #532]	; 0x214
 80016aa:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 80016ac:	4a23      	ldr	r2, [pc, #140]	; (800173c <chk_mounted+0x518>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d127      	bne.n	8001702 <chk_mounted+0x4de>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 80016b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b4:	f893 321f 	ldrb.w	r3, [r3, #543]	; 0x21f
 80016b8:	061a      	lsls	r2, r3, #24
 80016ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016bc:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 80016c0:	041b      	lsls	r3, r3, #16
 80016c2:	4313      	orrs	r3, r2
 80016c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016c6:	f892 221d 	ldrb.w	r2, [r2, #541]	; 0x21d
 80016ca:	0212      	lsls	r2, r2, #8
 80016cc:	4313      	orrs	r3, r2
 80016ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016d0:	f892 221c 	ldrb.w	r2, [r2, #540]	; 0x21c
 80016d4:	431a      	orrs	r2, r3
 80016d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d8:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 80016da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016dc:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 80016e0:	061a      	lsls	r2, r3, #24
 80016e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e4:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 80016e8:	041b      	lsls	r3, r3, #16
 80016ea:	4313      	orrs	r3, r2
 80016ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016ee:	f892 2219 	ldrb.w	r2, [r2, #537]	; 0x219
 80016f2:	0212      	lsls	r2, r2, #8
 80016f4:	4313      	orrs	r3, r2
 80016f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016f8:	f892 2218 	ldrb.w	r2, [r2, #536]	; 0x218
 80016fc:	431a      	orrs	r2, r3
 80016fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001700:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
 8001702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001704:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001708:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800170a:	4b0d      	ldr	r3, [pc, #52]	; (8001740 <chk_mounted+0x51c>)
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	3301      	adds	r3, #1
 8001710:	b29a      	uxth	r2, r3
 8001712:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <chk_mounted+0x51c>)
 8001714:	801a      	strh	r2, [r3, #0]
 8001716:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <chk_mounted+0x51c>)
 8001718:	881a      	ldrh	r2, [r3, #0]
 800171a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800171c:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
 800171e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001720:	2200      	movs	r2, #0
 8001722:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
 8001724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001726:	2200      	movs	r2, #0
 8001728:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	3748      	adds	r7, #72	; 0x48
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	ffffaa55 	.word	0xffffaa55
 8001738:	41615252 	.word	0x41615252
 800173c:	61417272 	.word	0x61417272
 8001740:	20005ec0 	.word	0x20005ec0

08001744 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	807b      	strh	r3, [r7, #2]
	if (!fs || !fs->fs_type || fs->id != id)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d008      	beq.n	8001768 <validate+0x24>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d004      	beq.n	8001768 <validate+0x24>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	88db      	ldrh	r3, [r3, #6]
 8001762:	887a      	ldrh	r2, [r7, #2]
 8001764:	429a      	cmp	r2, r3
 8001766:	d001      	beq.n	800176c <validate+0x28>
		return FR_INVALID_OBJECT;
 8001768:	2309      	movs	r3, #9
 800176a:	e00c      	b.n	8001786 <validate+0x42>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	785b      	ldrb	r3, [r3, #1]
 8001770:	4618      	mov	r0, r3
 8001772:	f000 fe79 	bl	8002468 <disk_status>
 8001776:	4603      	mov	r3, r0
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <validate+0x40>
		return FR_NOT_READY;
 8001780:	2303      	movs	r3, #3
 8001782:	e000      	b.n	8001786 <validate+0x42>

	return FR_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	6039      	str	r1, [r7, #0]
 800179a:	71fb      	strb	r3, [r7, #7]
	FATFS *rfs;


	if (vol >= _VOLUMES)			/* Check if the drive number is valid */
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <f_mount+0x16>
		return FR_INVALID_DRIVE;
 80017a2:	230b      	movs	r3, #11
 80017a4:	e016      	b.n	80017d4 <f_mount+0x44>
	rfs = FatFs[vol];				/* Get current fs object */
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	4a0d      	ldr	r2, [pc, #52]	; (80017e0 <f_mount+0x50>)
 80017aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ae:	60fb      	str	r3, [r7, #12]

	if (rfs) {
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d002      	beq.n	80017bc <f_mount+0x2c>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d002      	beq.n	80017c8 <f_mount+0x38>
		fs->fs_type = 0;			/* Clear new fs object */
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	2200      	movs	r2, #0
 80017c6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	4905      	ldr	r1, [pc, #20]	; (80017e0 <f_mount+0x50>)
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	return FR_OK;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	20005ebc 	.word	0x20005ebc

080017e4 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b092      	sub	sp, #72	; 0x48
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	4613      	mov	r3, r2
 80017f0:	71fb      	strb	r3, [r7, #7]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	f003 031f 	and.w	r3, r3, #31
 80017fe:	71fb      	strb	r3, [r7, #7]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	f023 0301 	bic.w	r3, r3, #1
 8001806:	b2da      	uxtb	r2, r3
 8001808:	f107 011c 	add.w	r1, r7, #28
 800180c:	f107 0308 	add.w	r3, r7, #8
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fd07 	bl	8001224 <chk_mounted>
 8001816:	4603      	mov	r3, r0
 8001818:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
 800181c:	f107 0310 	add.w	r3, r7, #16
 8001820:	637b      	str	r3, [r7, #52]	; 0x34
	if (res == FR_OK)
 8001822:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001826:	2b00      	cmp	r3, #0
 8001828:	d109      	bne.n	800183e <f_open+0x5a>
		res = follow_path(&dj, path);	/* Follow the file path */
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	f107 031c 	add.w	r3, r7, #28
 8001830:	4611      	mov	r1, r2
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fc12 	bl	800105c <follow_path>
 8001838:	4603      	mov	r3, r0
 800183a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	dir = dj.dir;
 800183e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001840:	643b      	str	r3, [r7, #64]	; 0x40

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
 8001842:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001846:	2b00      	cmp	r3, #0
 8001848:	d105      	bne.n	8001856 <f_open+0x72>
		if (!dir)	/* Current dir itself */
 800184a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800184c:	2b00      	cmp	r3, #0
 800184e:	d102      	bne.n	8001856 <f_open+0x72>
			res = FR_INVALID_NAME;
 8001850:	2306      	movs	r3, #6
 8001852:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	f003 031c 	and.w	r3, r3, #28
 800185c:	2b00      	cmp	r3, #0
 800185e:	f000 80b2 	beq.w	80019c6 <f_open+0x1e2>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
 8001862:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001866:	2b00      	cmp	r3, #0
 8001868:	d012      	beq.n	8001890 <f_open+0xac>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800186a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800186e:	2b04      	cmp	r3, #4
 8001870:	d107      	bne.n	8001882 <f_open+0x9e>
#if _FS_SHARE
				res = enq_lock(dj.fs) ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
 8001872:	f107 031c 	add.w	r3, r7, #28
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fae4 	bl	8000e44 <dir_register>
 800187c:	4603      	mov	r3, r0
 800187e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	f043 0308 	orr.w	r3, r3, #8
 8001888:	71fb      	strb	r3, [r7, #7]
			dir = dj.dir;					/* New entry */
 800188a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800188c:	643b      	str	r3, [r7, #64]	; 0x40
 800188e:	e012      	b.n	80018b6 <f_open+0xd2>
		}
		else {								/* Any object is already existing */
			if (mode & FA_CREATE_NEW) {		/* Cannot create new */
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	f003 0304 	and.w	r3, r3, #4
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <f_open+0xbe>
				res = FR_EXIST;
 800189a:	2308      	movs	r3, #8
 800189c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80018a0:	e009      	b.n	80018b6 <f_open+0xd2>
			} else {
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR))	/* Cannot overwrite it (R/O or DIR) */
 80018a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018a4:	330b      	adds	r3, #11
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	f003 0311 	and.w	r3, r3, #17
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d002      	beq.n	80018b6 <f_open+0xd2>
					res = FR_DENIED;
 80018b0:	2307      	movs	r3, #7
 80018b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80018b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f040 80a1 	bne.w	8001a02 <f_open+0x21e>
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f000 809b 	beq.w	8001a02 <f_open+0x21e>
			dw = get_fattime();					/* Created time */
 80018cc:	f7fe fcf4 	bl	80002b8 <get_fattime>
 80018d0:	63f8      	str	r0, [r7, #60]	; 0x3c
			ST_DWORD(dir+DIR_CrtTime, dw);
 80018d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018d4:	330e      	adds	r3, #14
 80018d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80018d8:	b2d2      	uxtb	r2, r2
 80018da:	701a      	strb	r2, [r3, #0]
 80018dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018de:	330f      	adds	r3, #15
 80018e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80018e2:	b292      	uxth	r2, r2
 80018e4:	0a12      	lsrs	r2, r2, #8
 80018e6:	b292      	uxth	r2, r2
 80018e8:	b2d2      	uxtb	r2, r2
 80018ea:	701a      	strb	r2, [r3, #0]
 80018ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018ee:	3310      	adds	r3, #16
 80018f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80018f2:	0c12      	lsrs	r2, r2, #16
 80018f4:	b2d2      	uxtb	r2, r2
 80018f6:	701a      	strb	r2, [r3, #0]
 80018f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018fa:	3311      	adds	r3, #17
 80018fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80018fe:	0e12      	lsrs	r2, r2, #24
 8001900:	b2d2      	uxtb	r2, r2
 8001902:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
 8001904:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001906:	330b      	adds	r3, #11
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
 800190c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800190e:	331c      	adds	r3, #28
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]
 8001914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001916:	331d      	adds	r3, #29
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
 800191c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800191e:	331e      	adds	r3, #30
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
 8001924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001926:	331f      	adds	r3, #31
 8001928:	2200      	movs	r2, #0
 800192a:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
 800192c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800192e:	3315      	adds	r3, #21
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	021b      	lsls	r3, r3, #8
 8001934:	b21a      	sxth	r2, r3
 8001936:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001938:	3314      	adds	r3, #20
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	b21b      	sxth	r3, r3
 800193e:	4313      	orrs	r3, r2
 8001940:	b21b      	sxth	r3, r3
 8001942:	b29b      	uxth	r3, r3
 8001944:	041b      	lsls	r3, r3, #16
 8001946:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001948:	321b      	adds	r2, #27
 800194a:	7812      	ldrb	r2, [r2, #0]
 800194c:	0212      	lsls	r2, r2, #8
 800194e:	b211      	sxth	r1, r2
 8001950:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001952:	321a      	adds	r2, #26
 8001954:	7812      	ldrb	r2, [r2, #0]
 8001956:	b212      	sxth	r2, r2
 8001958:	430a      	orrs	r2, r1
 800195a:	b212      	sxth	r2, r2
 800195c:	b292      	uxth	r2, r2
 800195e:	4313      	orrs	r3, r2
 8001960:	63bb      	str	r3, [r7, #56]	; 0x38
			ST_CLUST(dir, 0);					/* cluster = 0 */
 8001962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001964:	331a      	adds	r3, #26
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]
 800196a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800196c:	331b      	adds	r3, #27
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
 8001972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001974:	3314      	adds	r3, #20
 8001976:	2200      	movs	r2, #0
 8001978:	701a      	strb	r2, [r3, #0]
 800197a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800197c:	3315      	adds	r3, #21
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	2201      	movs	r2, #1
 8001986:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
 8001988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800198a:	2b00      	cmp	r3, #0
 800198c:	d039      	beq.n	8001a02 <f_open+0x21e>
				dw = dj.fs->winsect;
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001992:	63fb      	str	r3, [r7, #60]	; 0x3c
				res = remove_chain(dj.fs, cl);
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001998:	4618      	mov	r0, r3
 800199a:	f7fe ffda 	bl	8000952 <remove_chain>
 800199e:	4603      	mov	r3, r0
 80019a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				if (res == FR_OK) {
 80019a4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d12a      	bne.n	8001a02 <f_open+0x21e>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80019b0:	3a01      	subs	r2, #1
 80019b2:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fd01 	bl	80003c0 <move_window>
 80019be:	4603      	mov	r3, r0
 80019c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80019c4:	e01d      	b.n	8001a02 <f_open+0x21e>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
 80019c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d119      	bne.n	8001a02 <f_open+0x21e>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
 80019ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019d0:	330b      	adds	r3, #11
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	f003 0310 	and.w	r3, r3, #16
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <f_open+0x200>
				res = FR_NO_FILE;
 80019dc:	2304      	movs	r3, #4
 80019de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80019e2:	e00e      	b.n	8001a02 <f_open+0x21e>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d009      	beq.n	8001a02 <f_open+0x21e>
 80019ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019f0:	330b      	adds	r3, #11
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d002      	beq.n	8001a02 <f_open+0x21e>
					res = FR_DENIED;
 80019fc:	2307      	movs	r3, #7
 80019fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}
	}
	if (res == FR_OK) {
 8001a02:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10f      	bne.n	8001a2a <f_open+0x246>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	f003 0308 	and.w	r3, r3, #8
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <f_open+0x238>
			mode |= FA__WRITTEN;
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	f043 0320 	orr.w	r3, r3, #32
 8001a1a:	71fb      	strb	r3, [r7, #7]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001a28:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
 8001a2a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d13f      	bne.n	8001ab2 <f_open+0x2ce>
		fp->flag = mode;					/* File access mode */
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	79fa      	ldrb	r2, [r7, #7]
 8001a36:	719a      	strb	r2, [r3, #6]
		fp->org_clust =	LD_CLUST(dir);		/* File start cluster */
 8001a38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a3a:	3315      	adds	r3, #21
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	021b      	lsls	r3, r3, #8
 8001a40:	b21a      	sxth	r2, r3
 8001a42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a44:	3314      	adds	r3, #20
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	b21b      	sxth	r3, r3
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	b21b      	sxth	r3, r3
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	041b      	lsls	r3, r3, #16
 8001a52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001a54:	321b      	adds	r2, #27
 8001a56:	7812      	ldrb	r2, [r2, #0]
 8001a58:	0212      	lsls	r2, r2, #8
 8001a5a:	b211      	sxth	r1, r2
 8001a5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001a5e:	321a      	adds	r2, #26
 8001a60:	7812      	ldrb	r2, [r2, #0]
 8001a62:	b212      	sxth	r2, r2
 8001a64:	430a      	orrs	r2, r1
 8001a66:	b212      	sxth	r2, r2
 8001a68:	b292      	uxth	r2, r2
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 8001a70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a72:	331f      	adds	r3, #31
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	061a      	lsls	r2, r3, #24
 8001a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a7a:	331e      	adds	r3, #30
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	041b      	lsls	r3, r3, #16
 8001a80:	4313      	orrs	r3, r2
 8001a82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001a84:	321d      	adds	r2, #29
 8001a86:	7812      	ldrb	r2, [r2, #0]
 8001a88:	0212      	lsls	r2, r2, #8
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001a8e:	321c      	adds	r2, #28
 8001a90:	7812      	ldrb	r2, [r2, #0]
 8001a92:	431a      	orrs	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* No cluster link map table */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
 8001aa4:	69fa      	ldr	r2, [r7, #28]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	88da      	ldrh	r2, [r3, #6]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
 8001ab2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3748      	adds	r7, #72	; 0x48
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b08c      	sub	sp, #48	; 0x30
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	60f8      	str	r0, [r7, #12]
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	607a      	str	r2, [r7, #4]
 8001aca:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Initialize byte counter */
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	889b      	ldrh	r3, [r3, #4]
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	f7ff fe2f 	bl	8001744 <validate>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8001aec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d002      	beq.n	8001afa <f_read+0x3c>
 8001af4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001af8:	e135      	b.n	8001d66 <f_read+0x2a8>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	799b      	ldrb	r3, [r3, #6]
 8001afe:	b25b      	sxtb	r3, r3
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	da01      	bge.n	8001b08 <f_read+0x4a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
 8001b04:	2302      	movs	r3, #2
 8001b06:	e12e      	b.n	8001d66 <f_read+0x2a8>
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	799b      	ldrb	r3, [r3, #6]
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <f_read+0x5a>
		LEAVE_FF(fp->fs, FR_DENIED);
 8001b14:	2307      	movs	r3, #7
 8001b16:	e126      	b.n	8001d66 <f_read+0x2a8>
	remain = fp->fsize - fp->fptr;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	68da      	ldr	r2, [r3, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	61fb      	str	r3, [r7, #28]
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	f240 8117 	bls.w	8001d5c <f_read+0x29e>
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	607b      	str	r3, [r7, #4]

	for ( ;  btr;									/* Repeat until all data transferred */
 8001b32:	e113      	b.n	8001d5c <f_read+0x29e>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f040 80df 	bne.w	8001d00 <f_read+0x242>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	0a5b      	lsrs	r3, r3, #9
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	789b      	ldrb	r3, [r3, #2]
 8001b50:	3b01      	subs	r3, #1
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	4013      	ands	r3, r2
 8001b56:	76fb      	strb	r3, [r7, #27]
			if (!csect) {							/* On the cluster boundary? */
 8001b58:	7efb      	ldrb	r3, [r7, #27]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d12c      	bne.n	8001bb8 <f_read+0xfa>
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	689b      	ldr	r3, [r3, #8]
					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d102      	bne.n	8001b6c <f_read+0xae>
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	e008      	b.n	8001b7e <f_read+0xc0>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	4619      	mov	r1, r3
 8001b76:	4610      	mov	r0, r2
 8001b78:	f7fe fd3c 	bl	80005f4 <get_fat>
 8001b7c:	4603      	mov	r3, r0
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
 8001b7e:	613b      	str	r3, [r7, #16]
				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d808      	bhi.n	8001b98 <f_read+0xda>
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	799b      	ldrb	r3, [r3, #6]
 8001b8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	719a      	strb	r2, [r3, #6]
 8001b94:	2302      	movs	r3, #2
 8001b96:	e0e6      	b.n	8001d66 <f_read+0x2a8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b9e:	d108      	bne.n	8001bb2 <f_read+0xf4>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	799b      	ldrb	r3, [r3, #6]
 8001ba4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	719a      	strb	r2, [r3, #6]
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e0d9      	b.n	8001d66 <f_read+0x2a8>
				fp->curr_clust = clst;				/* Update current cluster */
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4610      	mov	r0, r2
 8001bc4:	f7fe fcf7 	bl	80005b6 <clust2sect>
 8001bc8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d108      	bne.n	8001be2 <f_read+0x124>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	799b      	ldrb	r3, [r3, #6]
 8001bd4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	719a      	strb	r2, [r3, #6]
 8001bde:	2302      	movs	r3, #2
 8001be0:	e0c1      	b.n	8001d66 <f_read+0x2a8>
			sect += csect;
 8001be2:	7efb      	ldrb	r3, [r7, #27]
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	4413      	add	r3, r2
 8001be8:	617b      	str	r3, [r7, #20]
			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	0a5b      	lsrs	r3, r3, #9
 8001bee:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {								/* Read maximum contiguous sectors directly */
 8001bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d042      	beq.n	8001c7c <f_read+0x1be>
				if (csect + cc > fp->fs->csize)		/* Clip at cluster boundary */
 8001bf6:	7efa      	ldrb	r2, [r7, #27]
 8001bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bfa:	4413      	add	r3, r2
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	6812      	ldr	r2, [r2, #0]
 8001c00:	7892      	ldrb	r2, [r2, #2]
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d906      	bls.n	8001c14 <f_read+0x156>
					cc = fp->fs->csize - csect;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	789b      	ldrb	r3, [r3, #2]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	7efb      	ldrb	r3, [r7, #27]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	62bb      	str	r3, [r7, #40]	; 0x28
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	7858      	ldrb	r0, [r3, #1]
 8001c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c22:	f000 fc37 	bl	8002494 <disk_read>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d008      	beq.n	8001c3e <f_read+0x180>
					ABORT(fp->fs, FR_DISK_ERR);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	799b      	ldrb	r3, [r3, #6]
 8001c30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	719a      	strb	r2, [r3, #6]
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e093      	b.n	8001d66 <f_read+0x2a8>
#if !_FS_READONLY && _FS_MINIMIZE <= 2				/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	799b      	ldrb	r3, [r3, #6]
 8001c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d014      	beq.n	8001c74 <f_read+0x1b6>
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	699a      	ldr	r2, [r3, #24]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	1ad2      	subs	r2, r2, r3
 8001c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d20d      	bcs.n	8001c74 <f_read+0x1b6>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	699a      	ldr	r2, [r3, #24]
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	025b      	lsls	r3, r3, #9
 8001c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c64:	18d0      	adds	r0, r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	3324      	adds	r3, #36	; 0x24
 8001c6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c6e:	4619      	mov	r1, r3
 8001c70:	f7fe fb2c 	bl	80002cc <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
 8001c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c76:	025b      	lsls	r3, r3, #9
 8001c78:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8001c7a:	e05b      	b.n	8001d34 <f_read+0x276>
			}
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {				/* Write sector I/O buffer if needed */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	799b      	ldrb	r3, [r3, #6]
 8001c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d01d      	beq.n	8001cc4 <f_read+0x206>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	7858      	ldrb	r0, [r3, #1]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	699a      	ldr	r2, [r3, #24]
 8001c98:	2301      	movs	r3, #1
 8001c9a:	f000 fc7f 	bl	800259c <disk_write>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d008      	beq.n	8001cb6 <f_read+0x1f8>
					ABORT(fp->fs, FR_DISK_ERR);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	799b      	ldrb	r3, [r3, #6]
 8001ca8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	719a      	strb	r2, [r3, #6]
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e057      	b.n	8001d66 <f_read+0x2a8>
				fp->flag &= ~FA__DIRTY;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	799b      	ldrb	r3, [r3, #6]
 8001cba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	699a      	ldr	r2, [r3, #24]
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d015      	beq.n	8001cfa <f_read+0x23c>
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	7858      	ldrb	r0, [r3, #1]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8001cda:	2301      	movs	r3, #1
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	f000 fbd9 	bl	8002494 <disk_read>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d008      	beq.n	8001cfa <f_read+0x23c>
					ABORT(fp->fs, FR_DISK_ERR);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	799b      	ldrb	r3, [r3, #6]
 8001cec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	719a      	strb	r2, [r3, #6]
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e035      	b.n	8001d66 <f_read+0x2a8>
			}
#endif
			fp->dsect = sect;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d08:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;
 8001d0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d901      	bls.n	8001d1a <f_read+0x25c>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d22:	3320      	adds	r3, #32
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	4413      	add	r3, r2
 8001d28:	3304      	adds	r3, #4
 8001d2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d30:	f7fe facc 	bl	80002cc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8001d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d38:	4413      	add	r3, r2
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d42:	441a      	add	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d4e:	441a      	add	r2, r3
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;									/* Repeat until all data transferred */
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f47f aee8 	bne.w	8001b34 <f_read+0x76>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3730      	adds	r7, #48	; 0x30
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b086      	sub	sp, #24
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	889b      	ldrh	r3, [r3, #4]
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4610      	mov	r0, r2
 8001d82:	f7ff fcdf 	bl	8001744 <validate>
 8001d86:	4603      	mov	r3, r0
 8001d88:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8001d8a:	7dfb      	ldrb	r3, [r7, #23]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f040 80a8 	bne.w	8001ee2 <f_sync+0x174>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	799b      	ldrb	r3, [r3, #6]
 8001d96:	f003 0320 	and.w	r3, r3, #32
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f000 80a1 	beq.w	8001ee2 <f_sync+0x174>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	799b      	ldrb	r3, [r3, #6]
 8001da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d016      	beq.n	8001dda <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	7858      	ldrb	r0, [r3, #1]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	699a      	ldr	r2, [r3, #24]
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	f000 fbed 	bl	800259c <disk_write>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <f_sync+0x5e>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e08b      	b.n	8001ee4 <f_sync+0x176>
				fp->flag &= ~FA__DIRTY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	799b      	ldrb	r3, [r3, #6]
 8001dd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	4619      	mov	r1, r3
 8001de4:	4610      	mov	r0, r2
 8001de6:	f7fe faeb 	bl	80003c0 <move_window>
 8001dea:	4603      	mov	r3, r0
 8001dec:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8001dee:	7dfb      	ldrb	r3, [r7, #23]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d176      	bne.n	8001ee2 <f_sync+0x174>
				dir = fp->dir_ptr;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	330b      	adds	r3, #11
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	320b      	adds	r2, #11
 8001e02:	7812      	ldrb	r2, [r2, #0]
 8001e04:	f042 0220 	orr.w	r2, r2, #32
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	331c      	adds	r3, #28
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	68d2      	ldr	r2, [r2, #12]
 8001e14:	b2d2      	uxtb	r2, r2
 8001e16:	701a      	strb	r2, [r3, #0]
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	331d      	adds	r3, #29
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	68d2      	ldr	r2, [r2, #12]
 8001e20:	b292      	uxth	r2, r2
 8001e22:	0a12      	lsrs	r2, r2, #8
 8001e24:	b292      	uxth	r2, r2
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	701a      	strb	r2, [r3, #0]
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	331e      	adds	r3, #30
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	68d2      	ldr	r2, [r2, #12]
 8001e32:	0c12      	lsrs	r2, r2, #16
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	701a      	strb	r2, [r3, #0]
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	331f      	adds	r3, #31
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	68d2      	ldr	r2, [r2, #12]
 8001e40:	0e12      	lsrs	r2, r2, #24
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	701a      	strb	r2, [r3, #0]
				ST_CLUST(dir, fp->org_clust);				/* Update start cluster */
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	331a      	adds	r3, #26
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6912      	ldr	r2, [r2, #16]
 8001e4e:	b2d2      	uxtb	r2, r2
 8001e50:	701a      	strb	r2, [r3, #0]
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	331b      	adds	r3, #27
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6912      	ldr	r2, [r2, #16]
 8001e5a:	b292      	uxth	r2, r2
 8001e5c:	0a12      	lsrs	r2, r2, #8
 8001e5e:	b292      	uxth	r2, r2
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	701a      	strb	r2, [r3, #0]
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	3314      	adds	r3, #20
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	6912      	ldr	r2, [r2, #16]
 8001e6c:	0c12      	lsrs	r2, r2, #16
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	701a      	strb	r2, [r3, #0]
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	3315      	adds	r3, #21
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6912      	ldr	r2, [r2, #16]
 8001e7a:	0c12      	lsrs	r2, r2, #16
 8001e7c:	b292      	uxth	r2, r2
 8001e7e:	0a12      	lsrs	r2, r2, #8
 8001e80:	b292      	uxth	r2, r2
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	701a      	strb	r2, [r3, #0]
				tim = get_fattime();						/* Update updated time */
 8001e86:	f7fe fa17 	bl	80002b8 <get_fattime>
 8001e8a:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	3316      	adds	r3, #22
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	701a      	strb	r2, [r3, #0]
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	3317      	adds	r3, #23
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	b292      	uxth	r2, r2
 8001e9e:	0a12      	lsrs	r2, r2, #8
 8001ea0:	b292      	uxth	r2, r2
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	701a      	strb	r2, [r3, #0]
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	3318      	adds	r3, #24
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	0c12      	lsrs	r2, r2, #16
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	701a      	strb	r2, [r3, #0]
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	3319      	adds	r3, #25
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	0e12      	lsrs	r2, r2, #24
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	799b      	ldrb	r3, [r3, #6]
 8001ec2:	f023 0320 	bic.w	r3, r3, #32
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe facb 	bl	8000474 <sync>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8001ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3718      	adds	r7, #24
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff ff3a 	bl	8001d6e <f_sync>
 8001efa:	4603      	mov	r3, r0
 8001efc:	73fb      	strb	r3, [r7, #15]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
 8001efe:	7bfb      	ldrb	r3, [r7, #15]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d102      	bne.n	8001f0a <f_close+0x1e>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
	return res;
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
#endif
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <_ZL6SELECTv>:
static
BYTE PowerFlag = 0;     /* indicates if "power" is on */

static
void SELECT (void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
	SpiDriver::SpiCsLow ();
 8001f18:	f001 f99c 	bl	8003254 <_ZN9SpiDriver8SpiCsLowEv>
}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <_ZL8DESELECTv>:

static
void DESELECT (void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
	SpiDriver::SpiCsHigh ();
 8001f24:	f001 f9a2 	bl	800326c <_ZN9SpiDriver9SpiCsHighEv>
}
 8001f28:	bf00      	nop
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <_ZL8xmit_spih>:
//
//


static void xmit_spi (BYTE Data)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
	SpiDriver::Transmit(Data);
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f001 f9a3 	bl	8003284 <_ZN9SpiDriver8TransmitEh>
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <_ZL8rcvr_spiv>:

static BYTE rcvr_spi (void)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
	 uint8_t Data = 0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	71fb      	strb	r3, [r7, #7]
	 Data = SpiDriver::Transmit(0xFF);
 8001f50:	20ff      	movs	r0, #255	; 0xff
 8001f52:	f001 f997 	bl	8003284 <_ZN9SpiDriver8TransmitEh>
 8001f56:	4603      	mov	r3, r0
 8001f58:	71fb      	strb	r3, [r7, #7]
  return Data;
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <_ZL10rcvr_spi_mPh>:


static
void rcvr_spi_m (BYTE *dst)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
    *dst = rcvr_spi();
 8001f6c:	f7ff ffeb 	bl	8001f46 <_ZL8rcvr_spiv>
 8001f70:	4603      	mov	r3, r0
 8001f72:	461a      	mov	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	701a      	strb	r2, [r3, #0]
}
 8001f78:	bf00      	nop
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <_ZL10wait_readyv>:
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/

static
BYTE wait_ready (void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
    BYTE res;

    Timer2 = 50;    /* Wait for ready in timeout of 500ms */
 8001f86:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <_ZL10wait_readyv+0x40>)
 8001f88:	2232      	movs	r2, #50	; 0x32
 8001f8a:	701a      	strb	r2, [r3, #0]
    rcvr_spi();
 8001f8c:	f7ff ffdb 	bl	8001f46 <_ZL8rcvr_spiv>
    do
        res = rcvr_spi();
 8001f90:	f7ff ffd9 	bl	8001f46 <_ZL8rcvr_spiv>
 8001f94:	4603      	mov	r3, r0
 8001f96:	71fb      	strb	r3, [r7, #7]
    while ((res != 0xFF) && Timer2);
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	2bff      	cmp	r3, #255	; 0xff
 8001f9c:	d006      	beq.n	8001fac <_ZL10wait_readyv+0x2c>
 8001f9e:	4b08      	ldr	r3, [pc, #32]	; (8001fc0 <_ZL10wait_readyv+0x40>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <_ZL10wait_readyv+0x2c>
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e000      	b.n	8001fae <_ZL10wait_readyv+0x2e>
 8001fac:	2300      	movs	r3, #0
    do
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d000      	beq.n	8001fb4 <_ZL10wait_readyv+0x34>
 8001fb2:	e7ed      	b.n	8001f90 <_ZL10wait_readyv+0x10>

    return res;
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20005ec3 	.word	0x20005ec3

08001fc4 <_ZL8power_onv>:
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on (void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
	uint8_t i;
 
  DESELECT();      // CS = 1
 8001fca:	f7ff ffa9 	bl	8001f20 <_ZL8DESELECTv>


  for (i = 0; i < 10; i++)
 8001fce:	2300      	movs	r3, #0
 8001fd0:	71fb      	strb	r3, [r7, #7]
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	2b09      	cmp	r3, #9
 8001fd6:	dc06      	bgt.n	8001fe6 <_ZL8power_onv+0x22>
    xmit_spi(0xFF);
 8001fd8:	20ff      	movs	r0, #255	; 0xff
 8001fda:	f7ff ffa7 	bl	8001f2c <_ZL8xmit_spih>
  for (i = 0; i < 10; i++)
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	71fb      	strb	r3, [r7, #7]
 8001fe4:	e7f5      	b.n	8001fd2 <_ZL8power_onv+0xe>

  PowerFlag = 1;
 8001fe6:	4b03      	ldr	r3, [pc, #12]	; (8001ff4 <_ZL8power_onv+0x30>)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	701a      	strb	r2, [r3, #0]
}
 8001fec:	bf00      	nop
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	20005ec5 	.word	0x20005ec5

08001ff8 <_ZL9power_offv>:


static
void power_off (void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
    PowerFlag = 0;
 8001ffc:	4b03      	ldr	r3, [pc, #12]	; (800200c <_ZL9power_offv+0x14>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	701a      	strb	r2, [r3, #0]
}
 8002002:	bf00      	nop
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	20005ec5 	.word	0x20005ec5

08002010 <_ZL9chk_powerv>:

static
int chk_power(void)        /* Socket power state: 0=off, 1=on */
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
    return PowerFlag;
 8002014:	4b03      	ldr	r3, [pc, #12]	; (8002024 <_ZL9chk_powerv+0x14>)
 8002016:	781b      	ldrb	r3, [r3, #0]
}
 8002018:	4618      	mov	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	20005ec5 	.word	0x20005ec5

08002028 <_ZL14rcvr_datablockPhj>:
static
bool rcvr_datablock (
    BYTE *buff,            /* Data buffer to store received data */
    UINT btr            /* Byte count (must be even number) */
)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
    BYTE token;

    Timer1 = 10;
 8002032:	4b1d      	ldr	r3, [pc, #116]	; (80020a8 <_ZL14rcvr_datablockPhj+0x80>)
 8002034:	220a      	movs	r2, #10
 8002036:	701a      	strb	r2, [r3, #0]
    do {                            /* Wait for data packet in timeout of 100ms */
        token = rcvr_spi();
 8002038:	f7ff ff85 	bl	8001f46 <_ZL8rcvr_spiv>
 800203c:	4603      	mov	r3, r0
 800203e:	73fb      	strb	r3, [r7, #15]
    } while ((token == 0xFF) && Timer1);
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	2bff      	cmp	r3, #255	; 0xff
 8002044:	d106      	bne.n	8002054 <_ZL14rcvr_datablockPhj+0x2c>
 8002046:	4b18      	ldr	r3, [pc, #96]	; (80020a8 <_ZL14rcvr_datablockPhj+0x80>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <_ZL14rcvr_datablockPhj+0x2c>
 8002050:	2301      	movs	r3, #1
 8002052:	e000      	b.n	8002056 <_ZL14rcvr_datablockPhj+0x2e>
 8002054:	2300      	movs	r3, #0
    do {                            /* Wait for data packet in timeout of 100ms */
 8002056:	2b00      	cmp	r3, #0
 8002058:	d000      	beq.n	800205c <_ZL14rcvr_datablockPhj+0x34>
 800205a:	e7ed      	b.n	8002038 <_ZL14rcvr_datablockPhj+0x10>
    if(token != 0xFE) return FALSE;    /* If not valid data token, retutn with error */
 800205c:	7bfb      	ldrb	r3, [r7, #15]
 800205e:	2bfe      	cmp	r3, #254	; 0xfe
 8002060:	d001      	beq.n	8002066 <_ZL14rcvr_datablockPhj+0x3e>
 8002062:	2300      	movs	r3, #0
 8002064:	e01c      	b.n	80020a0 <_ZL14rcvr_datablockPhj+0x78>

    do {                            /* Receive the data block into buffer */
        rcvr_spi_m(buff++);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	1c5a      	adds	r2, r3, #1
 800206a:	607a      	str	r2, [r7, #4]
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff ff79 	bl	8001f64 <_ZL10rcvr_spi_mPh>
        rcvr_spi_m(buff++);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	1c5a      	adds	r2, r3, #1
 8002076:	607a      	str	r2, [r7, #4]
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff ff73 	bl	8001f64 <_ZL10rcvr_spi_mPh>
    } while (btr -= 2);
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	3b02      	subs	r3, #2
 8002082:	603b      	str	r3, [r7, #0]
    do {                            /* Receive the data block into buffer */
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	bf14      	ite	ne
 800208a:	2301      	movne	r3, #1
 800208c:	2300      	moveq	r3, #0
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	d000      	beq.n	8002096 <_ZL14rcvr_datablockPhj+0x6e>
 8002094:	e7e7      	b.n	8002066 <_ZL14rcvr_datablockPhj+0x3e>
    rcvr_spi();                        /* Discard CRC */
 8002096:	f7ff ff56 	bl	8001f46 <_ZL8rcvr_spiv>
    rcvr_spi();
 800209a:	f7ff ff54 	bl	8001f46 <_ZL8rcvr_spiv>

    return TRUE;                    /* Return with success */
 800209e:	2301      	movs	r3, #1
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	20005ec2 	.word	0x20005ec2

080020ac <_ZL14xmit_datablockPKhh>:
static
bool xmit_datablock (
    const BYTE *buff,    /* 512 byte data block to be transmitted */
    BYTE token            /* Data/Stop token */
)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	70fb      	strb	r3, [r7, #3]
  BYTE resp, wc;
	uint32_t i = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	60bb      	str	r3, [r7, #8]

    if (wait_ready() != 0xFF) return FALSE;
 80020bc:	f7ff ff60 	bl	8001f80 <_ZL10wait_readyv>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2bff      	cmp	r3, #255	; 0xff
 80020c4:	bf14      	ite	ne
 80020c6:	2301      	movne	r3, #1
 80020c8:	2300      	moveq	r3, #0
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <_ZL14xmit_datablockPKhh+0x28>
 80020d0:	2300      	movs	r3, #0
 80020d2:	e04a      	b.n	800216a <_ZL14xmit_datablockPKhh+0xbe>

    xmit_spi(token);                    /* Xmit data token */
 80020d4:	78fb      	ldrb	r3, [r7, #3]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff ff28 	bl	8001f2c <_ZL8xmit_spih>
    if (token != 0xFD) 
 80020dc:	78fb      	ldrb	r3, [r7, #3]
 80020de:	2bfd      	cmp	r3, #253	; 0xfd
 80020e0:	d03b      	beq.n	800215a <_ZL14xmit_datablockPKhh+0xae>
	{    /* Is data token */
        wc = 0;
 80020e2:	2300      	movs	r3, #0
 80020e4:	73bb      	strb	r3, [r7, #14]
        do 
		{                            /* Xmit the 512 byte data block to MMC */
            xmit_spi(*buff++);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	1c5a      	adds	r2, r3, #1
 80020ea:	607a      	str	r2, [r7, #4]
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff ff1c 	bl	8001f2c <_ZL8xmit_spih>
            xmit_spi(*buff++);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	607a      	str	r2, [r7, #4]
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff ff15 	bl	8001f2c <_ZL8xmit_spih>
        do 
 8002102:	7bbb      	ldrb	r3, [r7, #14]
 8002104:	3b01      	subs	r3, #1
 8002106:	73bb      	strb	r3, [r7, #14]
 8002108:	7bbb      	ldrb	r3, [r7, #14]
 800210a:	2b00      	cmp	r3, #0
 800210c:	bf14      	ite	ne
 800210e:	2301      	movne	r3, #1
 8002110:	2300      	moveq	r3, #0
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	d000      	beq.n	800211a <_ZL14xmit_datablockPKhh+0x6e>
 8002118:	e7e5      	b.n	80020e6 <_ZL14xmit_datablockPKhh+0x3a>
        } while (--wc);

 		rcvr_spi();
 800211a:	f7ff ff14 	bl	8001f46 <_ZL8rcvr_spiv>
		rcvr_spi();
 800211e:	f7ff ff12 	bl	8001f46 <_ZL8rcvr_spiv>

		while (i <= 64)
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	2b40      	cmp	r3, #64	; 0x40
 8002126:	d80d      	bhi.n	8002144 <_ZL14xmit_datablockPKhh+0x98>
		{
        	resp = rcvr_spi();                /* Reveive data response */
 8002128:	f7ff ff0d 	bl	8001f46 <_ZL8rcvr_spiv>
 800212c:	4603      	mov	r3, r0
 800212e:	73fb      	strb	r3, [r7, #15]
        	if ((resp & 0x1F) == 0x05)        /* If not accepted, return with error */
 8002130:	7bfb      	ldrb	r3, [r7, #15]
 8002132:	f003 031f 	and.w	r3, r3, #31
 8002136:	2b05      	cmp	r3, #5
 8002138:	d100      	bne.n	800213c <_ZL14xmit_datablockPKhh+0x90>
            	break;
 800213a:	e003      	b.n	8002144 <_ZL14xmit_datablockPKhh+0x98>
			i++;
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	3301      	adds	r3, #1
 8002140:	60bb      	str	r3, [r7, #8]
		while (i <= 64)
 8002142:	e7ee      	b.n	8002122 <_ZL14xmit_datablockPKhh+0x76>
    	}
		while (rcvr_spi() == 0);
 8002144:	f7ff feff 	bl	8001f46 <_ZL8rcvr_spiv>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	bf0c      	ite	eq
 800214e:	2301      	moveq	r3, #1
 8002150:	2300      	movne	r3, #0
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	d000      	beq.n	800215a <_ZL14xmit_datablockPKhh+0xae>
 8002158:	e7f4      	b.n	8002144 <_ZL14xmit_datablockPKhh+0x98>
	}
	if ((resp & 0x1F) == 0x05)  
 800215a:	7bfb      	ldrb	r3, [r7, #15]
 800215c:	f003 031f 	and.w	r3, r3, #31
 8002160:	2b05      	cmp	r3, #5
 8002162:	d101      	bne.n	8002168 <_ZL14xmit_datablockPKhh+0xbc>
		return TRUE;
 8002164:	2301      	movs	r3, #1
 8002166:	e000      	b.n	800216a <_ZL14xmit_datablockPKhh+0xbe>
	else 
		return FALSE;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <_ZL8send_cmdhm>:
static
BYTE send_cmd (
    BYTE cmd,        /* Command byte */
    DWORD arg        /* Argument */
)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b084      	sub	sp, #16
 8002176:	af00      	add	r7, sp, #0
 8002178:	4603      	mov	r3, r0
 800217a:	6039      	str	r1, [r7, #0]
 800217c:	71fb      	strb	r3, [r7, #7]
    BYTE n, res;

    if (wait_ready() != 0xFF) return 0xFF;
 800217e:	f7ff feff 	bl	8001f80 <_ZL10wait_readyv>
 8002182:	4603      	mov	r3, r0
 8002184:	2bff      	cmp	r3, #255	; 0xff
 8002186:	bf14      	ite	ne
 8002188:	2301      	movne	r3, #1
 800218a:	2300      	moveq	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <_ZL8send_cmdhm+0x24>
 8002192:	23ff      	movs	r3, #255	; 0xff
 8002194:	e046      	b.n	8002224 <_ZL8send_cmdhm+0xb2>

    /* Send command packet */
    xmit_spi(cmd);                        /* Command */
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff fec7 	bl	8001f2c <_ZL8xmit_spih>
    xmit_spi((BYTE)(arg >> 24));        /* Argument[31..24] */
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	0e1b      	lsrs	r3, r3, #24
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff fec1 	bl	8001f2c <_ZL8xmit_spih>
    xmit_spi((BYTE)(arg >> 16));        /* Argument[23..16] */
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	0c1b      	lsrs	r3, r3, #16
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff febb 	bl	8001f2c <_ZL8xmit_spih>
    xmit_spi((BYTE)(arg >> 8));            /* Argument[15..8] */
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	0a1b      	lsrs	r3, r3, #8
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff feb5 	bl	8001f2c <_ZL8xmit_spih>
    xmit_spi((BYTE)arg);                /* Argument[7..0] */
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff feb0 	bl	8001f2c <_ZL8xmit_spih>
    n = 0;
 80021cc:	2300      	movs	r3, #0
 80021ce:	73fb      	strb	r3, [r7, #15]
    if (cmd == CMD0) n = 0x95;            /* CRC for CMD0(0) */
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	2b40      	cmp	r3, #64	; 0x40
 80021d4:	d101      	bne.n	80021da <_ZL8send_cmdhm+0x68>
 80021d6:	2395      	movs	r3, #149	; 0x95
 80021d8:	73fb      	strb	r3, [r7, #15]
    if (cmd == CMD8) n = 0x87;            /* CRC for CMD8(0x1AA) */
 80021da:	79fb      	ldrb	r3, [r7, #7]
 80021dc:	2b48      	cmp	r3, #72	; 0x48
 80021de:	d101      	bne.n	80021e4 <_ZL8send_cmdhm+0x72>
 80021e0:	2387      	movs	r3, #135	; 0x87
 80021e2:	73fb      	strb	r3, [r7, #15]
    xmit_spi(n);
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff fea0 	bl	8001f2c <_ZL8xmit_spih>

    /* Receive command response */
    if (cmd == CMD12) rcvr_spi();        /* Skip a stuff byte when stop reading */
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	2b4c      	cmp	r3, #76	; 0x4c
 80021f0:	d101      	bne.n	80021f6 <_ZL8send_cmdhm+0x84>
 80021f2:	f7ff fea8 	bl	8001f46 <_ZL8rcvr_spiv>
    n = 10;                                /* Wait for a valid response in timeout of 10 attempts */
 80021f6:	230a      	movs	r3, #10
 80021f8:	73fb      	strb	r3, [r7, #15]
    do
        res = rcvr_spi();
 80021fa:	f7ff fea4 	bl	8001f46 <_ZL8rcvr_spiv>
 80021fe:	4603      	mov	r3, r0
 8002200:	73bb      	strb	r3, [r7, #14]
    while ((res & 0x80) && --n);
 8002202:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002206:	2b00      	cmp	r3, #0
 8002208:	da07      	bge.n	800221a <_ZL8send_cmdhm+0xa8>
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	3b01      	subs	r3, #1
 800220e:	73fb      	strb	r3, [r7, #15]
 8002210:	7bfb      	ldrb	r3, [r7, #15]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <_ZL8send_cmdhm+0xa8>
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <_ZL8send_cmdhm+0xaa>
 800221a:	2300      	movs	r3, #0
    do
 800221c:	2b00      	cmp	r3, #0
 800221e:	d000      	beq.n	8002222 <_ZL8send_cmdhm+0xb0>
 8002220:	e7eb      	b.n	80021fa <_ZL8send_cmdhm+0x88>

    return res;            /* Return with the response value */
 8002222:	7bbb      	ldrb	r3, [r7, #14]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
    BYTE drv        /* Physical drive nmuber (0) */
)
{
 800222c:	b590      	push	{r4, r7, lr}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	71fb      	strb	r3, [r7, #7]
    BYTE n, ty, ocr[4];


    if (drv) return STA_NOINIT;            /* Supports only single drive */
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <disk_initialize+0x14>
 800223c:	2301      	movs	r3, #1
 800223e:	e108      	b.n	8002452 <disk_initialize+0x226>
    if (Stat & STA_NODISK) return Stat;    /* No card in the socket */
 8002240:	4b86      	ldr	r3, [pc, #536]	; (800245c <disk_initialize+0x230>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	b2db      	uxtb	r3, r3
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	bf14      	ite	ne
 800224e:	2301      	movne	r3, #1
 8002250:	2300      	moveq	r3, #0
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <disk_initialize+0x34>
 8002258:	4b80      	ldr	r3, [pc, #512]	; (800245c <disk_initialize+0x230>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	b2db      	uxtb	r3, r3
 800225e:	e0f8      	b.n	8002452 <disk_initialize+0x226>

    power_on();                            /* Force socket power on */
 8002260:	f7ff feb0 	bl	8001fc4 <_ZL8power_onv>
    //send_initial_clock_train();

    SELECT();                /* CS = L */
 8002264:	f7ff fe56 	bl	8001f14 <_ZL6SELECTv>
    ty = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	73bb      	strb	r3, [r7, #14]
    if (send_cmd(CMD0, 0) == 1) {            /* Enter Idle state */
 800226c:	2100      	movs	r1, #0
 800226e:	2040      	movs	r0, #64	; 0x40
 8002270:	f7ff ff7f 	bl	8002172 <_ZL8send_cmdhm>
 8002274:	4603      	mov	r3, r0
 8002276:	2b01      	cmp	r3, #1
 8002278:	bf0c      	ite	eq
 800227a:	2301      	moveq	r3, #1
 800227c:	2300      	movne	r3, #0
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b00      	cmp	r3, #0
 8002282:	f000 80ce 	beq.w	8002422 <disk_initialize+0x1f6>
        Timer1 = 100;                        /* Initialization timeout of 1000 msec */
 8002286:	4b76      	ldr	r3, [pc, #472]	; (8002460 <disk_initialize+0x234>)
 8002288:	2264      	movs	r2, #100	; 0x64
 800228a:	701a      	strb	r2, [r3, #0]
        if (send_cmd(CMD8, 0x1AA) == 1) {    /* SDC Ver2+ */
 800228c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002290:	2048      	movs	r0, #72	; 0x48
 8002292:	f7ff ff6e 	bl	8002172 <_ZL8send_cmdhm>
 8002296:	4603      	mov	r3, r0
 8002298:	2b01      	cmp	r3, #1
 800229a:	bf0c      	ite	eq
 800229c:	2301      	moveq	r3, #1
 800229e:	2300      	movne	r3, #0
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d068      	beq.n	8002378 <disk_initialize+0x14c>
            for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
 80022a6:	2300      	movs	r3, #0
 80022a8:	73fb      	strb	r3, [r7, #15]
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	dc0d      	bgt.n	80022cc <disk_initialize+0xa0>
 80022b0:	7bfc      	ldrb	r4, [r7, #15]
 80022b2:	f7ff fe48 	bl	8001f46 <_ZL8rcvr_spiv>
 80022b6:	4603      	mov	r3, r0
 80022b8:	461a      	mov	r2, r3
 80022ba:	f107 0310 	add.w	r3, r7, #16
 80022be:	4423      	add	r3, r4
 80022c0:	f803 2c08 	strb.w	r2, [r3, #-8]
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	3301      	adds	r3, #1
 80022c8:	73fb      	strb	r3, [r7, #15]
 80022ca:	e7ee      	b.n	80022aa <disk_initialize+0x7e>
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) {    /* The card can work at vdd range of 2.7-3.6V */
 80022cc:	7abb      	ldrb	r3, [r7, #10]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	f040 80a7 	bne.w	8002422 <disk_initialize+0x1f6>
 80022d4:	7afb      	ldrb	r3, [r7, #11]
 80022d6:	2baa      	cmp	r3, #170	; 0xaa
 80022d8:	f040 80a3 	bne.w	8002422 <disk_initialize+0x1f6>
                do {
                    if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 1UL << 30) == 0)    break;    /* ACMD41 with HCS bit */
 80022dc:	2100      	movs	r1, #0
 80022de:	2077      	movs	r0, #119	; 0x77
 80022e0:	f7ff ff47 	bl	8002172 <_ZL8send_cmdhm>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	dc09      	bgt.n	80022fe <disk_initialize+0xd2>
 80022ea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80022ee:	2069      	movs	r0, #105	; 0x69
 80022f0:	f7ff ff3f 	bl	8002172 <_ZL8send_cmdhm>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <disk_initialize+0xd2>
 80022fa:	2301      	movs	r3, #1
 80022fc:	e000      	b.n	8002300 <disk_initialize+0xd4>
 80022fe:	2300      	movs	r3, #0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d10a      	bne.n	800231a <disk_initialize+0xee>
                } while (Timer1);
 8002304:	4b56      	ldr	r3, [pc, #344]	; (8002460 <disk_initialize+0x234>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	b2db      	uxtb	r3, r3
                do {
 800230a:	2b00      	cmp	r3, #0
 800230c:	bf14      	ite	ne
 800230e:	2301      	movne	r3, #1
 8002310:	2300      	moveq	r3, #0
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <disk_initialize+0xf0>
 8002318:	e7e0      	b.n	80022dc <disk_initialize+0xb0>
                    if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 1UL << 30) == 0)    break;    /* ACMD41 with HCS bit */
 800231a:	bf00      	nop
                if (Timer1 && send_cmd(CMD58, 0) == 0) {    /* Check CCS bit */
 800231c:	4b50      	ldr	r3, [pc, #320]	; (8002460 <disk_initialize+0x234>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d008      	beq.n	8002338 <disk_initialize+0x10c>
 8002326:	2100      	movs	r1, #0
 8002328:	207a      	movs	r0, #122	; 0x7a
 800232a:	f7ff ff22 	bl	8002172 <_ZL8send_cmdhm>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <disk_initialize+0x10c>
 8002334:	2301      	movs	r3, #1
 8002336:	e000      	b.n	800233a <disk_initialize+0x10e>
 8002338:	2300      	movs	r3, #0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d071      	beq.n	8002422 <disk_initialize+0x1f6>
                    for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
 800233e:	2300      	movs	r3, #0
 8002340:	73fb      	strb	r3, [r7, #15]
 8002342:	7bfb      	ldrb	r3, [r7, #15]
 8002344:	2b03      	cmp	r3, #3
 8002346:	dc0d      	bgt.n	8002364 <disk_initialize+0x138>
 8002348:	7bfc      	ldrb	r4, [r7, #15]
 800234a:	f7ff fdfc 	bl	8001f46 <_ZL8rcvr_spiv>
 800234e:	4603      	mov	r3, r0
 8002350:	461a      	mov	r2, r3
 8002352:	f107 0310 	add.w	r3, r7, #16
 8002356:	4423      	add	r3, r4
 8002358:	f803 2c08 	strb.w	r2, [r3, #-8]
 800235c:	7bfb      	ldrb	r3, [r7, #15]
 800235e:	3301      	adds	r3, #1
 8002360:	73fb      	strb	r3, [r7, #15]
 8002362:	e7ee      	b.n	8002342 <disk_initialize+0x116>
                    ty = (ocr[0] & 0x40) ? 6 : 2;
 8002364:	7a3b      	ldrb	r3, [r7, #8]
 8002366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <disk_initialize+0x146>
 800236e:	2306      	movs	r3, #6
 8002370:	e000      	b.n	8002374 <disk_initialize+0x148>
 8002372:	2302      	movs	r3, #2
 8002374:	73bb      	strb	r3, [r7, #14]
 8002376:	e054      	b.n	8002422 <disk_initialize+0x1f6>
                }
            }
        } else {                            /* SDC Ver1 or MMC */
            ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1;    /* SDC : MMC */
 8002378:	2100      	movs	r1, #0
 800237a:	2077      	movs	r0, #119	; 0x77
 800237c:	f7ff fef9 	bl	8002172 <_ZL8send_cmdhm>
 8002380:	4603      	mov	r3, r0
 8002382:	2b01      	cmp	r3, #1
 8002384:	dc08      	bgt.n	8002398 <disk_initialize+0x16c>
 8002386:	2100      	movs	r1, #0
 8002388:	2069      	movs	r0, #105	; 0x69
 800238a:	f7ff fef2 	bl	8002172 <_ZL8send_cmdhm>
 800238e:	4603      	mov	r3, r0
 8002390:	2b01      	cmp	r3, #1
 8002392:	dc01      	bgt.n	8002398 <disk_initialize+0x16c>
 8002394:	2302      	movs	r3, #2
 8002396:	e000      	b.n	800239a <disk_initialize+0x16e>
 8002398:	2301      	movs	r3, #1
 800239a:	73bb      	strb	r3, [r7, #14]
            do {
                if (ty == 2) {
 800239c:	7bbb      	ldrb	r3, [r7, #14]
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d113      	bne.n	80023ca <disk_initialize+0x19e>
                    if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0) break;    /* ACMD41 */
 80023a2:	2100      	movs	r1, #0
 80023a4:	2077      	movs	r0, #119	; 0x77
 80023a6:	f7ff fee4 	bl	8002172 <_ZL8send_cmdhm>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	dc08      	bgt.n	80023c2 <disk_initialize+0x196>
 80023b0:	2100      	movs	r1, #0
 80023b2:	2069      	movs	r0, #105	; 0x69
 80023b4:	f7ff fedd 	bl	8002172 <_ZL8send_cmdhm>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <disk_initialize+0x196>
 80023be:	2301      	movs	r3, #1
 80023c0:	e000      	b.n	80023c4 <disk_initialize+0x198>
 80023c2:	2300      	movs	r3, #0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00c      	beq.n	80023e2 <disk_initialize+0x1b6>
 80023c8:	e017      	b.n	80023fa <disk_initialize+0x1ce>
                } else {
                    if (send_cmd(CMD1, 0) == 0) break;                                /* CMD1 */
 80023ca:	2100      	movs	r1, #0
 80023cc:	2041      	movs	r0, #65	; 0x41
 80023ce:	f7ff fed0 	bl	8002172 <_ZL8send_cmdhm>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	bf0c      	ite	eq
 80023d8:	2301      	moveq	r3, #1
 80023da:	2300      	movne	r3, #0
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10a      	bne.n	80023f8 <disk_initialize+0x1cc>
                }
            } while (Timer1);
 80023e2:	4b1f      	ldr	r3, [pc, #124]	; (8002460 <disk_initialize+0x234>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	b2db      	uxtb	r3, r3
            do {
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	bf14      	ite	ne
 80023ec:	2301      	movne	r3, #1
 80023ee:	2300      	moveq	r3, #0
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <disk_initialize+0x1ce>
 80023f6:	e7d1      	b.n	800239c <disk_initialize+0x170>
                    if (send_cmd(CMD1, 0) == 0) break;                                /* CMD1 */
 80023f8:	bf00      	nop
            if (!Timer1 || send_cmd(CMD16, 512) != 0)    /* Select R/W block length */
 80023fa:	4b19      	ldr	r3, [pc, #100]	; (8002460 <disk_initialize+0x234>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b00      	cmp	r3, #0
 8002402:	d007      	beq.n	8002414 <disk_initialize+0x1e8>
 8002404:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002408:	2050      	movs	r0, #80	; 0x50
 800240a:	f7ff feb2 	bl	8002172 <_ZL8send_cmdhm>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <disk_initialize+0x1ec>
 8002414:	2301      	movs	r3, #1
 8002416:	e000      	b.n	800241a <disk_initialize+0x1ee>
 8002418:	2300      	movs	r3, #0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <disk_initialize+0x1f6>
                ty = 0;
 800241e:	2300      	movs	r3, #0
 8002420:	73bb      	strb	r3, [r7, #14]
        }
    }
    CardType = ty;
 8002422:	4a10      	ldr	r2, [pc, #64]	; (8002464 <disk_initialize+0x238>)
 8002424:	7bbb      	ldrb	r3, [r7, #14]
 8002426:	7013      	strb	r3, [r2, #0]
    DESELECT();            /* CS = H */
 8002428:	f7ff fd7a 	bl	8001f20 <_ZL8DESELECTv>
    rcvr_spi();            /* Idle (Release DO) */
 800242c:	f7ff fd8b 	bl	8001f46 <_ZL8rcvr_spiv>

    if (ty)           /* Initialization succeded */
 8002430:	7bbb      	ldrb	r3, [r7, #14]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d008      	beq.n	8002448 <disk_initialize+0x21c>
        Stat &= ~STA_NOINIT;        /* Clear STA_NOINIT */
 8002436:	4b09      	ldr	r3, [pc, #36]	; (800245c <disk_initialize+0x230>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	b2db      	uxtb	r3, r3
 800243c:	f023 0301 	bic.w	r3, r3, #1
 8002440:	b2da      	uxtb	r2, r3
 8002442:	4b06      	ldr	r3, [pc, #24]	; (800245c <disk_initialize+0x230>)
 8002444:	701a      	strb	r2, [r3, #0]
 8002446:	e001      	b.n	800244c <disk_initialize+0x220>
	else          /* Initialization failed */
        power_off();
 8002448:	f7ff fdd6 	bl	8001ff8 <_ZL9power_offv>

    return Stat;
 800244c:	4b03      	ldr	r3, [pc, #12]	; (800245c <disk_initialize+0x230>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	b2db      	uxtb	r3, r3
}
 8002452:	4618      	mov	r0, r3
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	bd90      	pop	{r4, r7, pc}
 800245a:	bf00      	nop
 800245c:	20000000 	.word	0x20000000
 8002460:	20005ec2 	.word	0x20005ec2
 8002464:	20005ec4 	.word	0x20005ec4

08002468 <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
    BYTE drv        /* Physical drive nmuber (0) */
)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	71fb      	strb	r3, [r7, #7]
    if (drv) return STA_NOINIT;        /* Supports only single drive */
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <disk_status+0x14>
 8002478:	2301      	movs	r3, #1
 800247a:	e002      	b.n	8002482 <disk_status+0x1a>
    return Stat;
 800247c:	4b04      	ldr	r3, [pc, #16]	; (8002490 <disk_status+0x28>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	b2db      	uxtb	r3, r3
}
 8002482:	4618      	mov	r0, r3
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	20000000 	.word	0x20000000

08002494 <disk_read>:
    BYTE drv,            /* Physical drive nmuber (0) */
    BYTE *buff,            /* Pointer to the data buffer to store read data */
    DWORD sector,        /* Start sector number (LBA) */
    BYTE count            /* Sector count (1..255) */
)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	60b9      	str	r1, [r7, #8]
 800249c:	607a      	str	r2, [r7, #4]
 800249e:	461a      	mov	r2, r3
 80024a0:	4603      	mov	r3, r0
 80024a2:	73fb      	strb	r3, [r7, #15]
 80024a4:	4613      	mov	r3, r2
 80024a6:	73bb      	strb	r3, [r7, #14]
    if (drv || !count) return RES_PARERR;
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d102      	bne.n	80024b4 <disk_read+0x20>
 80024ae:	7bbb      	ldrb	r3, [r7, #14]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <disk_read+0x24>
 80024b4:	2304      	movs	r3, #4
 80024b6:	e069      	b.n	800258c <disk_read+0xf8>
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 80024b8:	4b36      	ldr	r3, [pc, #216]	; (8002594 <disk_read+0x100>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	bf14      	ite	ne
 80024c6:	2301      	movne	r3, #1
 80024c8:	2300      	moveq	r3, #0
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <disk_read+0x40>
 80024d0:	2303      	movs	r3, #3
 80024d2:	e05b      	b.n	800258c <disk_read+0xf8>

    if (!(CardType & 4)) sector *= 512;    /* Convert to byte address if needed */
 80024d4:	4b30      	ldr	r3, [pc, #192]	; (8002598 <disk_read+0x104>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d102      	bne.n	80024e6 <disk_read+0x52>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	025b      	lsls	r3, r3, #9
 80024e4:	607b      	str	r3, [r7, #4]

    SELECT();            /* CS = L */
 80024e6:	f7ff fd15 	bl	8001f14 <_ZL6SELECTv>

    if (count == 1) {    /* Single block read */
 80024ea:	7bbb      	ldrb	r3, [r7, #14]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d116      	bne.n	800251e <disk_read+0x8a>
        if ((send_cmd(CMD17, sector) == 0)    /* READ_SINGLE_BLOCK */
 80024f0:	6879      	ldr	r1, [r7, #4]
 80024f2:	2051      	movs	r0, #81	; 0x51
 80024f4:	f7ff fe3d 	bl	8002172 <_ZL8send_cmdhm>
 80024f8:	4603      	mov	r3, r0
            && rcvr_datablock(buff, 512))
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d109      	bne.n	8002512 <disk_read+0x7e>
 80024fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002502:	68b8      	ldr	r0, [r7, #8]
 8002504:	f7ff fd90 	bl	8002028 <_ZL14rcvr_datablockPhj>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <disk_read+0x7e>
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <disk_read+0x80>
 8002512:	2300      	movs	r3, #0
        if ((send_cmd(CMD17, sector) == 0)    /* READ_SINGLE_BLOCK */
 8002514:	2b00      	cmp	r3, #0
 8002516:	d02e      	beq.n	8002576 <disk_read+0xe2>
            count = 0;
 8002518:	2300      	movs	r3, #0
 800251a:	73bb      	strb	r3, [r7, #14]
 800251c:	e02b      	b.n	8002576 <disk_read+0xe2>
    }
    else {                /* Multiple block read */
        if (send_cmd(CMD18, sector) == 0) {    /* READ_MULTIPLE_BLOCK */
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	2052      	movs	r0, #82	; 0x52
 8002522:	f7ff fe26 	bl	8002172 <_ZL8send_cmdhm>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	bf0c      	ite	eq
 800252c:	2301      	moveq	r3, #1
 800252e:	2300      	movne	r3, #0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d01f      	beq.n	8002576 <disk_read+0xe2>
            do {
                if (!rcvr_datablock(buff, 512)) break;
 8002536:	f44f 7100 	mov.w	r1, #512	; 0x200
 800253a:	68b8      	ldr	r0, [r7, #8]
 800253c:	f7ff fd74 	bl	8002028 <_ZL14rcvr_datablockPhj>
 8002540:	4603      	mov	r3, r0
 8002542:	f083 0301 	eor.w	r3, r3, #1
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10f      	bne.n	800256c <disk_read+0xd8>
                buff += 512;
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002552:	60bb      	str	r3, [r7, #8]
            do {
 8002554:	7bbb      	ldrb	r3, [r7, #14]
 8002556:	3b01      	subs	r3, #1
 8002558:	73bb      	strb	r3, [r7, #14]
 800255a:	7bbb      	ldrb	r3, [r7, #14]
 800255c:	2b00      	cmp	r3, #0
 800255e:	bf14      	ite	ne
 8002560:	2301      	movne	r3, #1
 8002562:	2300      	moveq	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <disk_read+0xda>
 800256a:	e7e4      	b.n	8002536 <disk_read+0xa2>
                if (!rcvr_datablock(buff, 512)) break;
 800256c:	bf00      	nop
            } while (--count);
            send_cmd(CMD12, 0);                /* STOP_TRANSMISSION */
 800256e:	2100      	movs	r1, #0
 8002570:	204c      	movs	r0, #76	; 0x4c
 8002572:	f7ff fdfe 	bl	8002172 <_ZL8send_cmdhm>
        }
    }

    DESELECT();            /* CS = H */
 8002576:	f7ff fcd3 	bl	8001f20 <_ZL8DESELECTv>
    rcvr_spi();            /* Idle (Release DO) */
 800257a:	f7ff fce4 	bl	8001f46 <_ZL8rcvr_spiv>

    return count ? RES_ERROR : RES_OK;
 800257e:	7bbb      	ldrb	r3, [r7, #14]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <disk_read+0xf4>
 8002584:	2301      	movs	r3, #1
 8002586:	e000      	b.n	800258a <disk_read+0xf6>
 8002588:	2300      	movs	r3, #0
 800258a:	bf00      	nop
}
 800258c:	4618      	mov	r0, r3
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	20000000 	.word	0x20000000
 8002598:	20005ec4 	.word	0x20005ec4

0800259c <disk_write>:
    BYTE drv,            /* Physical drive nmuber (0) */
    const BYTE *buff,    /* Pointer to the data to be written */
    DWORD sector,        /* Start sector number (LBA) */
    BYTE count            /* Sector count (1..255) */
)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60b9      	str	r1, [r7, #8]
 80025a4:	607a      	str	r2, [r7, #4]
 80025a6:	461a      	mov	r2, r3
 80025a8:	4603      	mov	r3, r0
 80025aa:	73fb      	strb	r3, [r7, #15]
 80025ac:	4613      	mov	r3, r2
 80025ae:	73bb      	strb	r3, [r7, #14]
    if (drv || !count) return RES_PARERR;
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d102      	bne.n	80025bc <disk_write+0x20>
 80025b6:	7bbb      	ldrb	r3, [r7, #14]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <disk_write+0x24>
 80025bc:	2304      	movs	r3, #4
 80025be:	e08c      	b.n	80026da <disk_write+0x13e>
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 80025c0:	4b48      	ldr	r3, [pc, #288]	; (80026e4 <disk_write+0x148>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	bf14      	ite	ne
 80025ce:	2301      	movne	r3, #1
 80025d0:	2300      	moveq	r3, #0
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <disk_write+0x40>
 80025d8:	2303      	movs	r3, #3
 80025da:	e07e      	b.n	80026da <disk_write+0x13e>
    if (Stat & STA_PROTECT) return RES_WRPRT;
 80025dc:	4b41      	ldr	r3, [pc, #260]	; (80026e4 <disk_write+0x148>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	f003 0304 	and.w	r3, r3, #4
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	bf14      	ite	ne
 80025ea:	2301      	movne	r3, #1
 80025ec:	2300      	moveq	r3, #0
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <disk_write+0x5c>
 80025f4:	2302      	movs	r3, #2
 80025f6:	e070      	b.n	80026da <disk_write+0x13e>

    if (!(CardType & 4)) sector *= 512;    /* Convert to byte address if needed */
 80025f8:	4b3b      	ldr	r3, [pc, #236]	; (80026e8 <disk_write+0x14c>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b00      	cmp	r3, #0
 8002602:	d102      	bne.n	800260a <disk_write+0x6e>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	025b      	lsls	r3, r3, #9
 8002608:	607b      	str	r3, [r7, #4]

    SELECT();            /* CS = L */
 800260a:	f7ff fc83 	bl	8001f14 <_ZL6SELECTv>

    if (count == 1) {    /* Single block write */
 800260e:	7bbb      	ldrb	r3, [r7, #14]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d115      	bne.n	8002640 <disk_write+0xa4>
        if ((send_cmd(CMD24, sector) == 0)    /* WRITE_BLOCK */
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	2058      	movs	r0, #88	; 0x58
 8002618:	f7ff fdab 	bl	8002172 <_ZL8send_cmdhm>
 800261c:	4603      	mov	r3, r0
            && xmit_datablock(buff, 0xFE))
 800261e:	2b00      	cmp	r3, #0
 8002620:	d108      	bne.n	8002634 <disk_write+0x98>
 8002622:	21fe      	movs	r1, #254	; 0xfe
 8002624:	68b8      	ldr	r0, [r7, #8]
 8002626:	f7ff fd41 	bl	80020ac <_ZL14xmit_datablockPKhh>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <disk_write+0x98>
 8002630:	2301      	movs	r3, #1
 8002632:	e000      	b.n	8002636 <disk_write+0x9a>
 8002634:	2300      	movs	r3, #0
        if ((send_cmd(CMD24, sector) == 0)    /* WRITE_BLOCK */
 8002636:	2b00      	cmp	r3, #0
 8002638:	d044      	beq.n	80026c4 <disk_write+0x128>
            count = 0;
 800263a:	2300      	movs	r3, #0
 800263c:	73bb      	strb	r3, [r7, #14]
 800263e:	e041      	b.n	80026c4 <disk_write+0x128>
    }
    else {                /* Multiple block write */
        if (CardType & 2) {
 8002640:	4b29      	ldr	r3, [pc, #164]	; (80026e8 <disk_write+0x14c>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d008      	beq.n	800265e <disk_write+0xc2>
            send_cmd(CMD55, 0); send_cmd(CMD23, count);    /* ACMD23 */
 800264c:	2100      	movs	r1, #0
 800264e:	2077      	movs	r0, #119	; 0x77
 8002650:	f7ff fd8f 	bl	8002172 <_ZL8send_cmdhm>
 8002654:	7bbb      	ldrb	r3, [r7, #14]
 8002656:	4619      	mov	r1, r3
 8002658:	2057      	movs	r0, #87	; 0x57
 800265a:	f7ff fd8a 	bl	8002172 <_ZL8send_cmdhm>
        }
        if (send_cmd(CMD25, sector) == 0) {    /* WRITE_MULTIPLE_BLOCK */
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	2059      	movs	r0, #89	; 0x59
 8002662:	f7ff fd86 	bl	8002172 <_ZL8send_cmdhm>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	bf0c      	ite	eq
 800266c:	2301      	moveq	r3, #1
 800266e:	2300      	movne	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d026      	beq.n	80026c4 <disk_write+0x128>
            do {
                if (!xmit_datablock(buff, 0xFC)) break;
 8002676:	21fc      	movs	r1, #252	; 0xfc
 8002678:	68b8      	ldr	r0, [r7, #8]
 800267a:	f7ff fd17 	bl	80020ac <_ZL14xmit_datablockPKhh>
 800267e:	4603      	mov	r3, r0
 8002680:	f083 0301 	eor.w	r3, r3, #1
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10f      	bne.n	80026aa <disk_write+0x10e>
                buff += 512;
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002690:	60bb      	str	r3, [r7, #8]
            do {
 8002692:	7bbb      	ldrb	r3, [r7, #14]
 8002694:	3b01      	subs	r3, #1
 8002696:	73bb      	strb	r3, [r7, #14]
 8002698:	7bbb      	ldrb	r3, [r7, #14]
 800269a:	2b00      	cmp	r3, #0
 800269c:	bf14      	ite	ne
 800269e:	2301      	movne	r3, #1
 80026a0:	2300      	moveq	r3, #0
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <disk_write+0x110>
 80026a8:	e7e5      	b.n	8002676 <disk_write+0xda>
                if (!xmit_datablock(buff, 0xFC)) break;
 80026aa:	bf00      	nop
            } while (--count);
            if (!xmit_datablock(0, 0xFD))    /* STOP_TRAN token */
 80026ac:	21fd      	movs	r1, #253	; 0xfd
 80026ae:	2000      	movs	r0, #0
 80026b0:	f7ff fcfc 	bl	80020ac <_ZL14xmit_datablockPKhh>
 80026b4:	4603      	mov	r3, r0
 80026b6:	f083 0301 	eor.w	r3, r3, #1
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <disk_write+0x128>
                count = 1;
 80026c0:	2301      	movs	r3, #1
 80026c2:	73bb      	strb	r3, [r7, #14]
        }
    }

    DESELECT();            /* CS = H */
 80026c4:	f7ff fc2c 	bl	8001f20 <_ZL8DESELECTv>
    rcvr_spi();            /* Idle (Release DO) */
 80026c8:	f7ff fc3d 	bl	8001f46 <_ZL8rcvr_spiv>

    return count ? RES_ERROR : RES_OK;
 80026cc:	7bbb      	ldrb	r3, [r7, #14]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <disk_write+0x13a>
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <disk_write+0x13c>
 80026d6:	2300      	movs	r3, #0
 80026d8:	bf00      	nop
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20000000 	.word	0x20000000
 80026e8:	20005ec4 	.word	0x20005ec4

080026ec <disk_ioctl>:
DRESULT disk_ioctl (
    BYTE drv,        /* Physical drive nmuber (0) */
    BYTE ctrl,        /* Control code */
    void *buff        /* Buffer to send/receive control data */
)
{
 80026ec:	b590      	push	{r4, r7, lr}
 80026ee:	b08b      	sub	sp, #44	; 0x2c
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	603a      	str	r2, [r7, #0]
 80026f6:	71fb      	strb	r3, [r7, #7]
 80026f8:	460b      	mov	r3, r1
 80026fa:	71bb      	strb	r3, [r7, #6]
    DRESULT res;
    BYTE n, csd[16];
    BYTE *ptr = (BYTE*) buff;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	623b      	str	r3, [r7, #32]
    WORD csize;


    if (drv) return RES_PARERR;
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <disk_ioctl+0x1e>
 8002706:	2304      	movs	r3, #4
 8002708:	e139      	b.n	800297e <disk_ioctl+0x292>

    res = RES_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (ctrl == CTRL_POWER) {
 8002710:	79bb      	ldrb	r3, [r7, #6]
 8002712:	2b05      	cmp	r3, #5
 8002714:	d12c      	bne.n	8002770 <disk_ioctl+0x84>
        switch (*ptr) {
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d013      	beq.n	8002746 <disk_ioctl+0x5a>
 800271e:	2b02      	cmp	r3, #2
 8002720:	d017      	beq.n	8002752 <disk_ioctl+0x66>
 8002722:	2b00      	cmp	r3, #0
 8002724:	d120      	bne.n	8002768 <disk_ioctl+0x7c>
        case 0:        /* Sub control code == 0 (POWER_OFF) */
            if (chk_power())
 8002726:	f7ff fc73 	bl	8002010 <_ZL9chk_powerv>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	bf14      	ite	ne
 8002730:	2301      	movne	r3, #1
 8002732:	2300      	moveq	r3, #0
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <disk_ioctl+0x52>
                power_off();        /* Power off */
 800273a:	f7ff fc5d 	bl	8001ff8 <_ZL9power_offv>
            res = RES_OK;
 800273e:	2300      	movs	r3, #0
 8002740:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8002744:	e119      	b.n	800297a <disk_ioctl+0x28e>
        case 1:        /* Sub control code == 1 (POWER_ON) */
            power_on();                /* Power on */
 8002746:	f7ff fc3d 	bl	8001fc4 <_ZL8power_onv>
            res = RES_OK;
 800274a:	2300      	movs	r3, #0
 800274c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8002750:	e113      	b.n	800297a <disk_ioctl+0x28e>
        case 2:        /* Sub control code == 2 (POWER_GET) */
            *(ptr+1) = (BYTE)chk_power();
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	1c5c      	adds	r4, r3, #1
 8002756:	f7ff fc5b 	bl	8002010 <_ZL9chk_powerv>
 800275a:	4603      	mov	r3, r0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	7023      	strb	r3, [r4, #0]
            res = RES_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8002766:	e108      	b.n	800297a <disk_ioctl+0x28e>
        default :
            res = RES_PARERR;
 8002768:	2304      	movs	r3, #4
 800276a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800276e:	e104      	b.n	800297a <disk_ioctl+0x28e>
        }
    }
    else {
        if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002770:	4b85      	ldr	r3, [pc, #532]	; (8002988 <disk_ioctl+0x29c>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	bf14      	ite	ne
 800277e:	2301      	movne	r3, #1
 8002780:	2300      	moveq	r3, #0
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <disk_ioctl+0xa0>
 8002788:	2303      	movs	r3, #3
 800278a:	e0f8      	b.n	800297e <disk_ioctl+0x292>

        SELECT();        /* CS = L */
 800278c:	f7ff fbc2 	bl	8001f14 <_ZL6SELECTv>

        switch (ctrl) {
 8002790:	79bb      	ldrb	r3, [r7, #6]
 8002792:	2b0d      	cmp	r3, #13
 8002794:	f200 80e2 	bhi.w	800295c <disk_ioctl+0x270>
 8002798:	a201      	add	r2, pc, #4	; (adr r2, 80027a0 <disk_ioctl+0xb4>)
 800279a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800279e:	bf00      	nop
 80027a0:	0800289f 	.word	0x0800289f
 80027a4:	080027d9 	.word	0x080027d9
 80027a8:	0800288f 	.word	0x0800288f
 80027ac:	0800295d 	.word	0x0800295d
 80027b0:	0800295d 	.word	0x0800295d
 80027b4:	0800295d 	.word	0x0800295d
 80027b8:	0800295d 	.word	0x0800295d
 80027bc:	0800295d 	.word	0x0800295d
 80027c0:	0800295d 	.word	0x0800295d
 80027c4:	0800295d 	.word	0x0800295d
 80027c8:	0800295d 	.word	0x0800295d
 80027cc:	080028bb 	.word	0x080028bb
 80027d0:	080028e9 	.word	0x080028e9
 80027d4:	08002917 	.word	0x08002917
        case GET_SECTOR_COUNT :    /* Get number of sectors on the disk (DWORD) */
            if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80027d8:	2100      	movs	r1, #0
 80027da:	2049      	movs	r0, #73	; 0x49
 80027dc:	f7ff fcc9 	bl	8002172 <_ZL8send_cmdhm>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10a      	bne.n	80027fc <disk_ioctl+0x110>
 80027e6:	f107 030c 	add.w	r3, r7, #12
 80027ea:	2110      	movs	r1, #16
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fc1b 	bl	8002028 <_ZL14rcvr_datablockPhj>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <disk_ioctl+0x110>
 80027f8:	2301      	movs	r3, #1
 80027fa:	e000      	b.n	80027fe <disk_ioctl+0x112>
 80027fc:	2300      	movs	r3, #0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f000 80b0 	beq.w	8002964 <disk_ioctl+0x278>
                if ((csd[0] >> 6) == 1) {    /* SDC ver 2.00 */
 8002804:	7b3b      	ldrb	r3, [r7, #12]
 8002806:	119b      	asrs	r3, r3, #6
 8002808:	2b01      	cmp	r3, #1
 800280a:	d10e      	bne.n	800282a <disk_ioctl+0x13e>
                    csize = csd[9] + ((WORD)csd[8] << 8) + 1;
 800280c:	7d7b      	ldrb	r3, [r7, #21]
 800280e:	b29a      	uxth	r2, r3
 8002810:	7d3b      	ldrb	r3, [r7, #20]
 8002812:	b29b      	uxth	r3, r3
 8002814:	021b      	lsls	r3, r3, #8
 8002816:	b29b      	uxth	r3, r3
 8002818:	4413      	add	r3, r2
 800281a:	b29b      	uxth	r3, r3
 800281c:	3301      	adds	r3, #1
 800281e:	83fb      	strh	r3, [r7, #30]
                    *(DWORD*)buff = (DWORD)csize << 10;
 8002820:	8bfb      	ldrh	r3, [r7, #30]
 8002822:	029a      	lsls	r2, r3, #10
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	e02d      	b.n	8002886 <disk_ioctl+0x19a>
                } else {                    /* MMC or SDC ver 1.XX */
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800282a:	7c7b      	ldrb	r3, [r7, #17]
 800282c:	f003 030f 	and.w	r3, r3, #15
 8002830:	b2da      	uxtb	r2, r3
 8002832:	7dbb      	ldrb	r3, [r7, #22]
 8002834:	09db      	lsrs	r3, r3, #7
 8002836:	b2db      	uxtb	r3, r3
 8002838:	4413      	add	r3, r2
 800283a:	b2da      	uxtb	r2, r3
 800283c:	7d7b      	ldrb	r3, [r7, #21]
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	b2db      	uxtb	r3, r3
 8002842:	f003 0306 	and.w	r3, r3, #6
 8002846:	b2db      	uxtb	r3, r3
 8002848:	4413      	add	r3, r2
 800284a:	b2db      	uxtb	r3, r3
 800284c:	3302      	adds	r3, #2
 800284e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8002852:	7d3b      	ldrb	r3, [r7, #20]
 8002854:	119b      	asrs	r3, r3, #6
 8002856:	b29a      	uxth	r2, r3
 8002858:	7cfb      	ldrb	r3, [r7, #19]
 800285a:	b29b      	uxth	r3, r3
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	b29b      	uxth	r3, r3
 8002860:	4413      	add	r3, r2
 8002862:	b29a      	uxth	r2, r3
 8002864:	7cbb      	ldrb	r3, [r7, #18]
 8002866:	029b      	lsls	r3, r3, #10
 8002868:	b29b      	uxth	r3, r3
 800286a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800286e:	b29b      	uxth	r3, r3
 8002870:	4413      	add	r3, r2
 8002872:	b29b      	uxth	r3, r3
 8002874:	3301      	adds	r3, #1
 8002876:	83fb      	strh	r3, [r7, #30]
                    *(DWORD*)buff = (DWORD)csize << (n - 9);
 8002878:	8bfa      	ldrh	r2, [r7, #30]
 800287a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800287e:	3b09      	subs	r3, #9
 8002880:	409a      	lsls	r2, r3
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	601a      	str	r2, [r3, #0]
                }
                res = RES_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800288c:	e06a      	b.n	8002964 <disk_ioctl+0x278>

        case GET_SECTOR_SIZE :    /* Get sectors on the disk (WORD) */
            *(WORD*)buff = 512;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002894:	801a      	strh	r2, [r3, #0]
            res = RES_OK;
 8002896:	2300      	movs	r3, #0
 8002898:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800289c:	e069      	b.n	8002972 <disk_ioctl+0x286>

        case CTRL_SYNC :    /* Make sure that data has been written */
            if (wait_ready() == 0xFF)
 800289e:	f7ff fb6f 	bl	8001f80 <_ZL10wait_readyv>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2bff      	cmp	r3, #255	; 0xff
 80028a6:	bf0c      	ite	eq
 80028a8:	2301      	moveq	r3, #1
 80028aa:	2300      	movne	r3, #0
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d05a      	beq.n	8002968 <disk_ioctl+0x27c>
                res = RES_OK;
 80028b2:	2300      	movs	r3, #0
 80028b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80028b8:	e056      	b.n	8002968 <disk_ioctl+0x27c>

        case MMC_GET_CSD :    /* Receive CSD as a data block (16 bytes) */
            if (send_cmd(CMD9, 0) == 0        /* READ_CSD */
 80028ba:	2100      	movs	r1, #0
 80028bc:	2049      	movs	r0, #73	; 0x49
 80028be:	f7ff fc58 	bl	8002172 <_ZL8send_cmdhm>
 80028c2:	4603      	mov	r3, r0
                && rcvr_datablock(ptr, 16))
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d108      	bne.n	80028da <disk_ioctl+0x1ee>
 80028c8:	2110      	movs	r1, #16
 80028ca:	6a38      	ldr	r0, [r7, #32]
 80028cc:	f7ff fbac 	bl	8002028 <_ZL14rcvr_datablockPhj>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <disk_ioctl+0x1ee>
 80028d6:	2301      	movs	r3, #1
 80028d8:	e000      	b.n	80028dc <disk_ioctl+0x1f0>
 80028da:	2300      	movs	r3, #0
            if (send_cmd(CMD9, 0) == 0        /* READ_CSD */
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d045      	beq.n	800296c <disk_ioctl+0x280>
                res = RES_OK;
 80028e0:	2300      	movs	r3, #0
 80028e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80028e6:	e041      	b.n	800296c <disk_ioctl+0x280>

        case MMC_GET_CID :    /* Receive CID as a data block (16 bytes) */
            if (send_cmd(CMD10, 0) == 0        /* READ_CID */
 80028e8:	2100      	movs	r1, #0
 80028ea:	204a      	movs	r0, #74	; 0x4a
 80028ec:	f7ff fc41 	bl	8002172 <_ZL8send_cmdhm>
 80028f0:	4603      	mov	r3, r0
                && rcvr_datablock(ptr, 16))
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d108      	bne.n	8002908 <disk_ioctl+0x21c>
 80028f6:	2110      	movs	r1, #16
 80028f8:	6a38      	ldr	r0, [r7, #32]
 80028fa:	f7ff fb95 	bl	8002028 <_ZL14rcvr_datablockPhj>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <disk_ioctl+0x21c>
 8002904:	2301      	movs	r3, #1
 8002906:	e000      	b.n	800290a <disk_ioctl+0x21e>
 8002908:	2300      	movs	r3, #0
            if (send_cmd(CMD10, 0) == 0        /* READ_CID */
 800290a:	2b00      	cmp	r3, #0
 800290c:	d030      	beq.n	8002970 <disk_ioctl+0x284>
                res = RES_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8002914:	e02c      	b.n	8002970 <disk_ioctl+0x284>

        case MMC_GET_OCR :    /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0) {    /* READ_OCR */
 8002916:	2100      	movs	r1, #0
 8002918:	207a      	movs	r0, #122	; 0x7a
 800291a:	f7ff fc2a 	bl	8002172 <_ZL8send_cmdhm>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	bf0c      	ite	eq
 8002924:	2301      	moveq	r3, #1
 8002926:	2300      	movne	r3, #0
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d016      	beq.n	800295c <disk_ioctl+0x270>
                for (n = 0; n < 4; n++)
 800292e:	2300      	movs	r3, #0
 8002930:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002934:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002938:	2b03      	cmp	r3, #3
 800293a:	dc0c      	bgt.n	8002956 <disk_ioctl+0x26a>
                    *ptr++ = rcvr_spi();
 800293c:	6a3c      	ldr	r4, [r7, #32]
 800293e:	1c63      	adds	r3, r4, #1
 8002940:	623b      	str	r3, [r7, #32]
 8002942:	f7ff fb00 	bl	8001f46 <_ZL8rcvr_spiv>
 8002946:	4603      	mov	r3, r0
 8002948:	7023      	strb	r3, [r4, #0]
                for (n = 0; n < 4; n++)
 800294a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800294e:	3301      	adds	r3, #1
 8002950:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002954:	e7ee      	b.n	8002934 <disk_ioctl+0x248>
                res = RES_OK;
 8002956:	2300      	movs	r3, #0
 8002958:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
//            *ptr = CardType;
//            res = RES_OK;
//            break;

        default:
            res = RES_PARERR;
 800295c:	2304      	movs	r3, #4
 800295e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002962:	e006      	b.n	8002972 <disk_ioctl+0x286>
            break;
 8002964:	bf00      	nop
 8002966:	e004      	b.n	8002972 <disk_ioctl+0x286>
            break;
 8002968:	bf00      	nop
 800296a:	e002      	b.n	8002972 <disk_ioctl+0x286>
            break;
 800296c:	bf00      	nop
 800296e:	e000      	b.n	8002972 <disk_ioctl+0x286>
            break;
 8002970:	bf00      	nop
        }

        DESELECT();            /* CS = H */
 8002972:	f7ff fad5 	bl	8001f20 <_ZL8DESELECTv>
        rcvr_spi();            /* Idle (Release DO) */
 8002976:	f7ff fae6 	bl	8001f46 <_ZL8rcvr_spiv>
    }

    return res;
 800297a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800297e:	4618      	mov	r0, r3
 8002980:	372c      	adds	r7, #44	; 0x2c
 8002982:	46bd      	mov	sp, r7
 8002984:	bd90      	pop	{r4, r7, pc}
 8002986:	bf00      	nop
 8002988:	20000000 	.word	0x20000000

0800298c <LL_DAC_SetTriggerSource>:
  *         (2) On STM32F3, parameter not available on all DAC instances: DAC1 (for DAC instances DACx available on the selected device).\n
  *         (3) On STM32F3, parameter not available on all DAC instances: DAC2 (for DAC instances DACx available on the selected device).
  * @retval None
  */
__STATIC_INLINE void LL_DAC_SetTriggerSource(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t TriggerSource)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
  MODIFY_REG(DACx->CR,
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f003 0310 	and.w	r3, r3, #16
 80029a2:	2138      	movs	r1, #56	; 0x38
 80029a4:	fa01 f303 	lsl.w	r3, r1, r3
 80029a8:	43db      	mvns	r3, r3
 80029aa:	401a      	ands	r2, r3
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f003 0310 	and.w	r3, r3, #16
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	fa01 f303 	lsl.w	r3, r1, r3
 80029b8:	431a      	orrs	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	601a      	str	r2, [r3, #0]
             DAC_CR_TSEL1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK),
             TriggerSource << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK));
}
 80029be:	bf00      	nop
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <LL_DAC_EnableDMAReq>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_EnableDMAReq(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
 80029d2:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	f003 0310 	and.w	r3, r3, #16
 80029de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029e2:	fa01 f303 	lsl.w	r3, r1, r3
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	601a      	str	r2, [r3, #0]
          DAC_CR_DMAEN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK));
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <LL_DAC_Enable>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_Enable(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	f003 0310 	and.w	r3, r3, #16
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	601a      	str	r2, [r3, #0]
          DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK));
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <LL_DAC_EnableTrigger>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_EnableTrigger(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	f003 0310 	and.w	r3, r3, #16
 8002a38:	2104      	movs	r1, #4
 8002a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	601a      	str	r2, [r3, #0]
          DAC_CR_TEN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK));
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8002a58:	4908      	ldr	r1, [pc, #32]	; (8002a7c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002a5a:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002a5c:	695a      	ldr	r2, [r3, #20]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002a64:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002a66:	695a      	ldr	r2, [r3, #20]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
}
 8002a70:	bf00      	nop
 8002a72:	3714      	adds	r7, #20
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr
 8002a7c:	40021000 	.word	0x40021000

08002a80 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8002a88:	4908      	ldr	r1, [pc, #32]	; (8002aac <LL_APB1_GRP1_EnableClock+0x2c>)
 8002a8a:	4b08      	ldr	r3, [pc, #32]	; (8002aac <LL_APB1_GRP1_EnableClock+0x2c>)
 8002a8c:	69da      	ldr	r2, [r3, #28]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002a94:	4b05      	ldr	r3, [pc, #20]	; (8002aac <LL_APB1_GRP1_EnableClock+0x2c>)
 8002a96:	69da      	ldr	r2, [r3, #28]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
}
 8002aa0:	bf00      	nop
 8002aa2:	3714      	adds	r7, #20
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	40021000 	.word	0x40021000

08002ab0 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f043 0201 	orr.w	r2, r3, #1
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	601a      	str	r2, [r3, #0]
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	601a      	str	r2, [r3, #0]
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	605a      	str	r2, [r3, #4]
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b08d      	sub	sp, #52	; 0x34
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	60f8      	str	r0, [r7, #12]
 8002b56:	60b9      	str	r1, [r7, #8]
 8002b58:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	617b      	str	r3, [r7, #20]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	fa93 f3a3 	rbit	r3, r3
 8002b68:	613b      	str	r3, [r7, #16]
   return(result);
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	61fb      	str	r3, [r7, #28]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	fab3 f383 	clz	r3, r3
 8002b74:	61bb      	str	r3, [r7, #24]
  return(result);
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	2103      	movs	r1, #3
 8002b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b82:	43db      	mvns	r3, r3
 8002b84:	401a      	ands	r2, r3
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	fa93 f3a3 	rbit	r3, r3
 8002b90:	623b      	str	r3, [r7, #32]
   return(result);
 8002b92:	6a3b      	ldr	r3, [r7, #32]
 8002b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b98:	fab3 f383 	clz	r3, r3
 8002b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8002baa:	431a      	orrs	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	601a      	str	r2, [r3, #0]
}
 8002bb0:	bf00      	nop
 8002bb2:	3734      	adds	r7, #52	; 0x34
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b08d      	sub	sp, #52	; 0x34
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6a1a      	ldr	r2, [r3, #32]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	fa93 f3a3 	rbit	r3, r3
 8002bd6:	613b      	str	r3, [r7, #16]
   return(result);
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	fab3 f383 	clz	r3, r3
 8002be2:	61bb      	str	r3, [r7, #24]
  return(result);
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	210f      	movs	r1, #15
 8002bec:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	401a      	ands	r2, r3
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfa:	fa93 f3a3 	rbit	r3, r3
 8002bfe:	623b      	str	r3, [r7, #32]
   return(result);
 8002c00:	6a3b      	ldr	r3, [r7, #32]
 8002c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c06:	fab3 f383 	clz	r3, r3
 8002c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	fa01 f303 	lsl.w	r3, r1, r3
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002c1e:	bf00      	nop
 8002c20:	3734      	adds	r7, #52	; 0x34
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
	...

08002c2c <_ZN3dacC1EPhm>:
  GPIOA->AFR[0] |= (1<<16) | (1<<19);

}


dac::dac(uint8_t * waveSampleArray, uint32_t  waveSampleNb){
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]



	  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002c38:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002c3c:	f7ff ff08 	bl	8002a50 <LL_AHB1_GRP1_EnableClock>
	  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8002c40:	2002      	movs	r0, #2
 8002c42:	f7ff ff05 	bl	8002a50 <LL_AHB1_GRP1_EnableClock>
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_DAC1);
 8002c46:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8002c4a:	f7ff ff19 	bl	8002a80 <LL_APB1_GRP1_EnableClock>
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8002c4e:	2010      	movs	r0, #16
 8002c50:	f7ff ff16 	bl	8002a80 <LL_APB1_GRP1_EnableClock>

	  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_4, LL_GPIO_MODE_ALTERNATE);
 8002c54:	2202      	movs	r2, #2
 8002c56:	2110      	movs	r1, #16
 8002c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c5c:	f7ff ff77 	bl	8002b4e <LL_GPIO_SetPinMode>
	  LL_GPIO_SetAFPin_0_7(GPIOB, LL_GPIO_PIN_4, LL_GPIO_AF_9);
 8002c60:	2209      	movs	r2, #9
 8002c62:	2110      	movs	r1, #16
 8002c64:	481b      	ldr	r0, [pc, #108]	; (8002cd4 <_ZN3dacC1EPhm+0xa8>)
 8002c66:	f7ff ffa9 	bl	8002bbc <LL_GPIO_SetAFPin_0_7>



	  //DAC->CR = DAC_CR_DMAEN1 | DAC_CR_TEN1 |  DAC_CR_EN1;

	  LL_DAC_SetTriggerSource(DAC1, LL_DAC_CHANNEL_1,LL_DAC_TRIG_EXT_TIM6_TRGO );
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	491a      	ldr	r1, [pc, #104]	; (8002cd8 <_ZN3dacC1EPhm+0xac>)
 8002c6e:	481b      	ldr	r0, [pc, #108]	; (8002cdc <_ZN3dacC1EPhm+0xb0>)
 8002c70:	f7ff fe8c 	bl	800298c <LL_DAC_SetTriggerSource>
	  LL_DAC_EnableDMAReq(DAC1, LL_DAC_CHANNEL_1);
 8002c74:	4918      	ldr	r1, [pc, #96]	; (8002cd8 <_ZN3dacC1EPhm+0xac>)
 8002c76:	4819      	ldr	r0, [pc, #100]	; (8002cdc <_ZN3dacC1EPhm+0xb0>)
 8002c78:	f7ff fea7 	bl	80029ca <LL_DAC_EnableDMAReq>
	  LL_DAC_EnableTrigger(DAC1, LL_DAC_CHANNEL_1);
 8002c7c:	4916      	ldr	r1, [pc, #88]	; (8002cd8 <_ZN3dacC1EPhm+0xac>)
 8002c7e:	4817      	ldr	r0, [pc, #92]	; (8002cdc <_ZN3dacC1EPhm+0xb0>)
 8002c80:	f7ff fed0 	bl	8002a24 <LL_DAC_EnableTrigger>
	  LL_DAC_Enable(DAC1, LL_DAC_CHANNEL_1);
 8002c84:	4914      	ldr	r1, [pc, #80]	; (8002cd8 <_ZN3dacC1EPhm+0xac>)
 8002c86:	4815      	ldr	r0, [pc, #84]	; (8002cdc <_ZN3dacC1EPhm+0xb0>)
 8002c88:	f7ff feb6 	bl	80029f8 <LL_DAC_Enable>


	  LL_TIM_SetAutoReload(TIM6, 30);
 8002c8c:	211e      	movs	r1, #30
 8002c8e:	4814      	ldr	r0, [pc, #80]	; (8002ce0 <_ZN3dacC1EPhm+0xb4>)
 8002c90:	f7ff ff3c 	bl	8002b0c <LL_TIM_SetAutoReload>
	  LL_TIM_SetPrescaler(TIM6, 300);
 8002c94:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002c98:	4811      	ldr	r0, [pc, #68]	; (8002ce0 <_ZN3dacC1EPhm+0xb4>)
 8002c9a:	f7ff ff29 	bl	8002af0 <LL_TIM_SetPrescaler>
	  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_UPDATE);
 8002c9e:	2120      	movs	r1, #32
 8002ca0:	480f      	ldr	r0, [pc, #60]	; (8002ce0 <_ZN3dacC1EPhm+0xb4>)
 8002ca2:	f7ff ff41 	bl	8002b28 <LL_TIM_SetTriggerOutput>
	  LL_TIM_EnableARRPreload(TIM6);
 8002ca6:	480e      	ldr	r0, [pc, #56]	; (8002ce0 <_ZN3dacC1EPhm+0xb4>)
 8002ca8:	f7ff ff12 	bl	8002ad0 <LL_TIM_EnableARRPreload>
	  LL_TIM_EnableCounter(TIM6);
 8002cac:	480c      	ldr	r0, [pc, #48]	; (8002ce0 <_ZN3dacC1EPhm+0xb4>)
 8002cae:	f7ff feff 	bl	8002ab0 <LL_TIM_EnableCounter>



	  DMA2_Channel3->CNDTR = waveSampleNb; // number of data to transfer
 8002cb2:	4a0c      	ldr	r2, [pc, #48]	; (8002ce4 <_ZN3dacC1EPhm+0xb8>)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6053      	str	r3, [r2, #4]
	  DMA2_Channel3->CPAR = (uint32_t)&(DAC->DHR8R1);
 8002cb8:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <_ZN3dacC1EPhm+0xb8>)
 8002cba:	4a0b      	ldr	r2, [pc, #44]	; (8002ce8 <_ZN3dacC1EPhm+0xbc>)
 8002cbc:	609a      	str	r2, [r3, #8]
	  DMA2_Channel3->CMAR = (uint32_t)waveSampleArray; //memory address register
 8002cbe:	4a09      	ldr	r2, [pc, #36]	; (8002ce4 <_ZN3dacC1EPhm+0xb8>)
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	60d3      	str	r3, [r2, #12]
	  DMA2_Channel3->CCR = DMA_CCR_MINC | DMA_CCR_CIRC  | DMA_CCR_DIR | DMA_CCR_EN; // enable circular, memory increment,  dir from memory to dac
 8002cc4:	4b07      	ldr	r3, [pc, #28]	; (8002ce4 <_ZN3dacC1EPhm+0xb8>)
 8002cc6:	22b1      	movs	r2, #177	; 0xb1
 8002cc8:	601a      	str	r2, [r3, #0]
}
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	48000400 	.word	0x48000400
 8002cd8:	02100001 	.word	0x02100001
 8002cdc:	40007400 	.word	0x40007400
 8002ce0:	40001000 	.word	0x40001000
 8002ce4:	40020430 	.word	0x40020430
 8002ce8:	40007410 	.word	0x40007410

08002cec <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	f5ad 4d13 	sub.w	sp, sp, #37632	; 0x9300
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0


	  SpiDriver Spi;
 8002cf6:	f507 4313 	add.w	r3, r7, #37632	; 0x9300
 8002cfa:	f103 030c 	add.w	r3, r3, #12
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 fa20 	bl	8003144 <_ZN9SpiDriverC1Ev>


	  disk_initialize(0);
 8002d04:	2000      	movs	r0, #0
 8002d06:	f7ff fa91 	bl	800222c <disk_initialize>

	  FATFS fatDrive;
	  f_mount( 0, &fatDrive);
 8002d0a:	f507 4310 	add.w	r3, r7, #36864	; 0x9000
 8002d0e:	f103 03dc 	add.w	r3, r3, #220	; 0xdc
 8002d12:	4619      	mov	r1, r3
 8002d14:	2000      	movs	r0, #0
 8002d16:	f7fe fd3b 	bl	8001790 <f_mount>
	  FIL fp;
	  FRESULT res = 	f_open(&fp, "sound", FA_OPEN_EXISTING | FA_READ);
 8002d1a:	f507 430e 	add.w	r3, r7, #36352	; 0x8e00
 8002d1e:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 8002d22:	2201      	movs	r2, #1
 8002d24:	492f      	ldr	r1, [pc, #188]	; (8002de4 <main+0xf8>)
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fe fd5c 	bl	80017e4 <f_open>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	f507 4213 	add.w	r2, r7, #37632	; 0x9300
 8002d32:	f102 0213 	add.w	r2, r2, #19
 8002d36:	7013      	strb	r3, [r2, #0]
	  const uint16_t bytesToRead = 1024;
 8002d38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d3c:	f507 4213 	add.w	r2, r7, #37632	; 0x9300
 8002d40:	f102 0210 	add.w	r2, r2, #16
 8002d44:	8013      	strh	r3, [r2, #0]
	  uint8_t readBuff[bytesToRead];
	  UINT readBytes;
	  waveHeader_t waveHeader;
	  res = f_read(&fp,  (uint8_t*) &waveHeader, sizeof(waveHeader_t), &readBytes);
 8002d46:	f507 430a 	add.w	r3, r7, #35328	; 0x8a00
 8002d4a:	f103 03b4 	add.w	r3, r3, #180	; 0xb4
 8002d4e:	f507 410a 	add.w	r1, r7, #35328	; 0x8a00
 8002d52:	f101 0188 	add.w	r1, r1, #136	; 0x88
 8002d56:	f507 400e 	add.w	r0, r7, #36352	; 0x8e00
 8002d5a:	f100 00b8 	add.w	r0, r0, #184	; 0xb8
 8002d5e:	222c      	movs	r2, #44	; 0x2c
 8002d60:	f7fe fead 	bl	8001abe <f_read>
 8002d64:	4603      	mov	r3, r0
 8002d66:	f507 4213 	add.w	r2, r7, #37632	; 0x9300
 8002d6a:	f102 0213 	add.w	r2, r2, #19
 8002d6e:	7013      	strb	r3, [r2, #0]




	  uint8_t sound_wav[35460];
	  res = f_read(&fp,  (uint8_t*) sound_wav, 35460, &readBytes);
 8002d70:	f507 430a 	add.w	r3, r7, #35328	; 0x8a00
 8002d74:	f103 03b4 	add.w	r3, r3, #180	; 0xb4
 8002d78:	f107 0118 	add.w	r1, r7, #24
 8002d7c:	3914      	subs	r1, #20
 8002d7e:	f507 400e 	add.w	r0, r7, #36352	; 0x8e00
 8002d82:	f100 00b8 	add.w	r0, r0, #184	; 0xb8
 8002d86:	f648 2284 	movw	r2, #35460	; 0x8a84
 8002d8a:	f7fe fe98 	bl	8001abe <f_read>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	f507 4213 	add.w	r2, r7, #37632	; 0x9300
 8002d94:	f102 0213 	add.w	r2, r2, #19
 8002d98:	7013      	strb	r3, [r2, #0]
	  f_close(&fp);
 8002d9a:	f507 430e 	add.w	r3, r7, #36352	; 0x8e00
 8002d9e:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff f8a2 	bl	8001eec <f_close>

	  dac dacObj(&doorbelWav[4000], doorbelWavLen-4000);
 8002da8:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <main+0xfc>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f5a3 627a 	sub.w	r2, r3, #4000	; 0xfa0
 8002db0:	f107 0318 	add.w	r3, r7, #24
 8002db4:	3b18      	subs	r3, #24
 8002db6:	490d      	ldr	r1, [pc, #52]	; (8002dec <main+0x100>)
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff ff37 	bl	8002c2c <_ZN3dacC1EPhm>

  uint32_t ii = 0;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	f507 4213 	add.w	r2, r7, #37632	; 0x9300
 8002dc4:	f102 0214 	add.w	r2, r2, #20
 8002dc8:	6013      	str	r3, [r2, #0]

  /* TODO - Add your application code here */
  while (1)
  {
       ii++;
 8002dca:	f507 4313 	add.w	r3, r7, #37632	; 0x9300
 8002dce:	f103 0314 	add.w	r3, r3, #20
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	f507 4213 	add.w	r2, r7, #37632	; 0x9300
 8002dda:	f102 0214 	add.w	r2, r2, #20
 8002dde:	6013      	str	r3, [r2, #0]
 8002de0:	e7f3      	b.n	8002dca <main+0xde>
 8002de2:	bf00      	nop
 8002de4:	0800346c 	.word	0x0800346c
 8002de8:	20005e9c 	.word	0x20005e9c
 8002dec:	20000fa4 	.word	0x20000fa4

08002df0 <LL_AHB1_GRP1_EnableClock>:
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8002df8:	4908      	ldr	r1, [pc, #32]	; (8002e1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002dfa:	4b08      	ldr	r3, [pc, #32]	; (8002e1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002dfc:	695a      	ldr	r2, [r3, #20]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002e04:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002e06:	695a      	ldr	r2, [r3, #20]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
}
 8002e10:	bf00      	nop
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	40021000 	.word	0x40021000

08002e20 <LL_APB1_GRP1_EnableClock>:
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002e28:	4908      	ldr	r1, [pc, #32]	; (8002e4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002e2a:	4b08      	ldr	r3, [pc, #32]	; (8002e4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002e2c:	69da      	ldr	r2, [r3, #28]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002e34:	4b05      	ldr	r3, [pc, #20]	; (8002e4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002e36:	69da      	ldr	r2, [r3, #28]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
}
 8002e40:	bf00      	nop
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	40021000 	.word	0x40021000

08002e50 <LL_GPIO_SetPinMode>:
{
 8002e50:	b480      	push	{r7}
 8002e52:	b08d      	sub	sp, #52	; 0x34
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	fa93 f3a3 	rbit	r3, r3
 8002e6a:	613b      	str	r3, [r7, #16]
   return(result);
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	fab3 f383 	clz	r3, r3
 8002e76:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	2103      	movs	r1, #3
 8002e80:	fa01 f303 	lsl.w	r3, r1, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	401a      	ands	r2, r3
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8e:	fa93 f3a3 	rbit	r3, r3
 8002e92:	623b      	str	r3, [r7, #32]
   return(result);
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9a:	fab3 f383 	clz	r3, r3
 8002e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8002eac:	431a      	orrs	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	601a      	str	r2, [r3, #0]
}
 8002eb2:	bf00      	nop
 8002eb4:	3734      	adds	r7, #52	; 0x34
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <LL_GPIO_SetPinOutputType>:
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b085      	sub	sp, #20
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	60f8      	str	r0, [r7, #12]
 8002ec6:	60b9      	str	r1, [r7, #8]
 8002ec8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	401a      	ands	r2, r3
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	fb01 f303 	mul.w	r3, r1, r3
 8002edc:	431a      	orrs	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	605a      	str	r2, [r3, #4]
}
 8002ee2:	bf00      	nop
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <LL_GPIO_SetPinSpeed>:
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b08d      	sub	sp, #52	; 0x34
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	60f8      	str	r0, [r7, #12]
 8002ef6:	60b9      	str	r1, [r7, #8]
 8002ef8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	fa93 f3a3 	rbit	r3, r3
 8002f08:	613b      	str	r3, [r7, #16]
   return(result);
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	fab3 f383 	clz	r3, r3
 8002f14:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	2103      	movs	r1, #3
 8002f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f22:	43db      	mvns	r3, r3
 8002f24:	401a      	ands	r2, r3
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	fa93 f3a3 	rbit	r3, r3
 8002f30:	623b      	str	r3, [r7, #32]
   return(result);
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f38:	fab3 f383 	clz	r3, r3
 8002f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	609a      	str	r2, [r3, #8]
}
 8002f50:	bf00      	nop
 8002f52:	3734      	adds	r7, #52	; 0x34
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <LL_GPIO_SetPinPull>:
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b08d      	sub	sp, #52	; 0x34
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	68da      	ldr	r2, [r3, #12]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	fa93 f3a3 	rbit	r3, r3
 8002f76:	613b      	str	r3, [r7, #16]
   return(result);
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	fab3 f383 	clz	r3, r3
 8002f82:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	2103      	movs	r1, #3
 8002f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f90:	43db      	mvns	r3, r3
 8002f92:	401a      	ands	r2, r3
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9a:	fa93 f3a3 	rbit	r3, r3
 8002f9e:	623b      	str	r3, [r7, #32]
   return(result);
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
 8002fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa6:	fab3 f383 	clz	r3, r3
 8002faa:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	60da      	str	r2, [r3, #12]
}
 8002fbe:	bf00      	nop
 8002fc0:	3734      	adds	r7, #52	; 0x34
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b08d      	sub	sp, #52	; 0x34
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	60f8      	str	r0, [r7, #12]
 8002fd2:	60b9      	str	r1, [r7, #8]
 8002fd4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	0a1b      	lsrs	r3, r3, #8
 8002fde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	fa93 f3a3 	rbit	r3, r3
 8002fe6:	613b      	str	r3, [r7, #16]
   return(result);
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	fab3 f383 	clz	r3, r3
 8002ff2:	61bb      	str	r3, [r7, #24]
  return(result);
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	210f      	movs	r1, #15
 8002ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8003000:	43db      	mvns	r3, r3
 8003002:	401a      	ands	r2, r3
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	0a1b      	lsrs	r3, r3, #8
 8003008:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	fa93 f3a3 	rbit	r3, r3
 8003010:	623b      	str	r3, [r7, #32]
   return(result);
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8003016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003018:	fab3 f383 	clz	r3, r3
 800301c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800301e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003020:	b2db      	uxtb	r3, r3
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	fa01 f303 	lsl.w	r3, r1, r3
 800302a:	431a      	orrs	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8003030:	bf00      	nop
 8003032:	3734      	adds	r7, #52	; 0x34
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */

__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	619a      	str	r2, [r3, #24]
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <LL_SPI_Enable>:
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	601a      	str	r2, [r3, #0]
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <LL_SPI_SetRxFIFOThreshold>:
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	431a      	orrs	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	605a      	str	r2, [r3, #4]
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	bf0c      	ite	eq
 80030ce:	2301      	moveq	r3, #1
 80030d0:	2300      	movne	r3, #0
 80030d2:	b2db      	uxtb	r3, r3
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	bf0c      	ite	eq
 80030f4:	2301      	moveq	r3, #1
 80030f6:	2300      	movne	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	b2db      	uxtb	r3, r3
}
 8003114:	4618      	mov	r0, r3
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	460b      	mov	r3, r1
 800312a:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	330c      	adds	r3, #12
 8003130:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	78fa      	ldrb	r2, [r7, #3]
 8003136:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif
}
 8003138:	bf00      	nop
 800313a:	3714      	adds	r7, #20
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <_ZN9SpiDriverC1Ev>:
#include "stm32f3xx.h"
#include "stm32f3xx_ll_bus.h"
#include "stm32f3xx_ll_gpio.h"
#include "stm32f3xx_ll_spi.h"

SpiDriver::SpiDriver(void){
 8003144:	b580      	push	{r7, lr}
 8003146:	b08c      	sub	sp, #48	; 0x30
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]


	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800314c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003150:	f7ff fe4e 	bl	8002df0 <LL_AHB1_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8003154:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003158:	f7ff fe62 	bl	8002e20 <LL_APB1_GRP1_EnableClock>


	/*CS Pin*/
	LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_12, LL_GPIO_MODE_OUTPUT);
 800315c:	2201      	movs	r2, #1
 800315e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003162:	483a      	ldr	r0, [pc, #232]	; (800324c <_ZN9SpiDriverC1Ev+0x108>)
 8003164:	f7ff fe74 	bl	8002e50 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinOutputType(GPIOB, LL_GPIO_PIN_12, LL_GPIO_OUTPUT_PUSHPULL);
 8003168:	2200      	movs	r2, #0
 800316a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800316e:	4837      	ldr	r0, [pc, #220]	; (800324c <_ZN9SpiDriverC1Ev+0x108>)
 8003170:	f7ff fea5 	bl	8002ebe <LL_GPIO_SetPinOutputType>
	LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_12, LL_GPIO_PULL_UP);
 8003174:	2201      	movs	r2, #1
 8003176:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800317a:	4834      	ldr	r0, [pc, #208]	; (800324c <_ZN9SpiDriverC1Ev+0x108>)
 800317c:	f7ff feee 	bl	8002f5c <LL_GPIO_SetPinPull>
	LL_GPIO_SetPinSpeed(GPIOB, LL_GPIO_PIN_12, LL_GPIO_SPEED_FREQ_HIGH);
 8003180:	2203      	movs	r2, #3
 8003182:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003186:	4831      	ldr	r0, [pc, #196]	; (800324c <_ZN9SpiDriverC1Ev+0x108>)
 8003188:	f7ff feb1 	bl	8002eee <LL_GPIO_SetPinSpeed>

	/*SPI Hardware controlled Pin*/
	LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_13, LL_GPIO_MODE_ALTERNATE);
 800318c:	2202      	movs	r2, #2
 800318e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003192:	482e      	ldr	r0, [pc, #184]	; (800324c <_ZN9SpiDriverC1Ev+0x108>)
 8003194:	f7ff fe5c 	bl	8002e50 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_14, LL_GPIO_MODE_ALTERNATE);
 8003198:	2202      	movs	r2, #2
 800319a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800319e:	482b      	ldr	r0, [pc, #172]	; (800324c <_ZN9SpiDriverC1Ev+0x108>)
 80031a0:	f7ff fe56 	bl	8002e50 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_15, LL_GPIO_MODE_ALTERNATE);
 80031a4:	2202      	movs	r2, #2
 80031a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031aa:	4828      	ldr	r0, [pc, #160]	; (800324c <_ZN9SpiDriverC1Ev+0x108>)
 80031ac:	f7ff fe50 	bl	8002e50 <LL_GPIO_SetPinMode>

	LL_GPIO_SetPinSpeed(GPIOB, LL_GPIO_PIN_13, LL_GPIO_SPEED_FREQ_HIGH);
 80031b0:	2203      	movs	r2, #3
 80031b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031b6:	4825      	ldr	r0, [pc, #148]	; (800324c <_ZN9SpiDriverC1Ev+0x108>)
 80031b8:	f7ff fe99 	bl	8002eee <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinSpeed(GPIOB, LL_GPIO_PIN_14, LL_GPIO_SPEED_FREQ_HIGH);
 80031bc:	2203      	movs	r2, #3
 80031be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80031c2:	4822      	ldr	r0, [pc, #136]	; (800324c <_ZN9SpiDriverC1Ev+0x108>)
 80031c4:	f7ff fe93 	bl	8002eee <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinSpeed(GPIOB, LL_GPIO_PIN_15, LL_GPIO_SPEED_FREQ_HIGH);
 80031c8:	2203      	movs	r2, #3
 80031ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031ce:	481f      	ldr	r0, [pc, #124]	; (800324c <_ZN9SpiDriverC1Ev+0x108>)
 80031d0:	f7ff fe8d 	bl	8002eee <LL_GPIO_SetPinSpeed>


	LL_GPIO_SetAFPin_8_15(GPIOB, LL_GPIO_PIN_13, LL_GPIO_AF_5);
 80031d4:	2205      	movs	r2, #5
 80031d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031da:	481c      	ldr	r0, [pc, #112]	; (800324c <_ZN9SpiDriverC1Ev+0x108>)
 80031dc:	f7ff fef5 	bl	8002fca <LL_GPIO_SetAFPin_8_15>
	LL_GPIO_SetAFPin_8_15(GPIOB, LL_GPIO_PIN_14, LL_GPIO_AF_5);
 80031e0:	2205      	movs	r2, #5
 80031e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80031e6:	4819      	ldr	r0, [pc, #100]	; (800324c <_ZN9SpiDriverC1Ev+0x108>)
 80031e8:	f7ff feef 	bl	8002fca <LL_GPIO_SetAFPin_8_15>
	LL_GPIO_SetAFPin_8_15(GPIOB, LL_GPIO_PIN_15, LL_GPIO_AF_5);
 80031ec:	2205      	movs	r2, #5
 80031ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031f2:	4816      	ldr	r0, [pc, #88]	; (800324c <_ZN9SpiDriverC1Ev+0x108>)
 80031f4:	f7ff fee9 	bl	8002fca <LL_GPIO_SetAFPin_8_15>


	LL_SPI_SetRxFIFOThreshold(SPI2, LL_SPI_RX_FIFO_TH_QUARTER);
 80031f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031fc:	4814      	ldr	r0, [pc, #80]	; (8003250 <_ZN9SpiDriverC1Ev+0x10c>)
 80031fe:	f7ff ff49 	bl	8003094 <LL_SPI_SetRxFIFOThreshold>
	LL_SPI_InitTypeDef SPI_InitStruct;
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV64;
 8003202:	2328      	movs	r3, #40	; 0x28
 8003204:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003206:	2300      	movs	r3, #0
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800320a:	2300      	movs	r3, #0
 800320c:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.CRCPoly = 0;
 800320e:	2300      	movs	r3, #0
 8003210:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8003212:	2300      	movs	r3, #0
 8003214:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8003216:	2300      	movs	r3, #0
 8003218:	617b      	str	r3, [r7, #20]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800321a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800321e:	613b      	str	r3, [r7, #16]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003220:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003224:	60fb      	str	r3, [r7, #12]
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003226:	f44f 7300 	mov.w	r3, #512	; 0x200
 800322a:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800322c:	2300      	movs	r3, #0
 800322e:	60bb      	str	r3, [r7, #8]
	LL_SPI_Init(SPI2, &SPI_InitStruct);
 8003230:	f107 0308 	add.w	r3, r7, #8
 8003234:	4619      	mov	r1, r3
 8003236:	4806      	ldr	r0, [pc, #24]	; (8003250 <_ZN9SpiDriverC1Ev+0x10c>)
 8003238:	f7fc ffe9 	bl	800020e <LL_SPI_Init>
	LL_SPI_Enable(SPI2);
 800323c:	4804      	ldr	r0, [pc, #16]	; (8003250 <_ZN9SpiDriverC1Ev+0x10c>)
 800323e:	f7ff ff19 	bl	8003074 <LL_SPI_Enable>

}
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4618      	mov	r0, r3
 8003246:	3730      	adds	r7, #48	; 0x30
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	48000400 	.word	0x48000400
 8003250:	40003800 	.word	0x40003800

08003254 <_ZN9SpiDriver8SpiCsLowEv>:



void SpiDriver::SpiCsLow (void){
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12);
 8003258:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800325c:	4802      	ldr	r0, [pc, #8]	; (8003268 <_ZN9SpiDriver8SpiCsLowEv+0x14>)
 800325e:	f7ff fefb 	bl	8003058 <LL_GPIO_ResetOutputPin>
}
 8003262:	bf00      	nop
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	48000400 	.word	0x48000400

0800326c <_ZN9SpiDriver9SpiCsHighEv>:
void SpiDriver::SpiCsHigh (void){
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_12);
 8003270:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003274:	4802      	ldr	r0, [pc, #8]	; (8003280 <_ZN9SpiDriver9SpiCsHighEv+0x14>)
 8003276:	f7ff fee1 	bl	800303c <LL_GPIO_SetOutputPin>
}
 800327a:	bf00      	nop
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	48000400 	.word	0x48000400

08003284 <_ZN9SpiDriver8TransmitEh>:




uint8_t SpiDriver::Transmit(uint8_t byte){
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	71fb      	strb	r3, [r7, #7]
	while (!(LL_SPI_IsActiveFlag_TXE(SPI2)));
 800328e:	4812      	ldr	r0, [pc, #72]	; (80032d8 <_ZN9SpiDriver8TransmitEh+0x54>)
 8003290:	f7ff ff26 	bl	80030e0 <LL_SPI_IsActiveFlag_TXE>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	bf0c      	ite	eq
 800329a:	2301      	moveq	r3, #1
 800329c:	2300      	movne	r3, #0
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d000      	beq.n	80032a6 <_ZN9SpiDriver8TransmitEh+0x22>
 80032a4:	e7f3      	b.n	800328e <_ZN9SpiDriver8TransmitEh+0xa>
	LL_SPI_TransmitData8(SPI2,byte);
 80032a6:	79fb      	ldrb	r3, [r7, #7]
 80032a8:	4619      	mov	r1, r3
 80032aa:	480b      	ldr	r0, [pc, #44]	; (80032d8 <_ZN9SpiDriver8TransmitEh+0x54>)
 80032ac:	f7ff ff38 	bl	8003120 <LL_SPI_TransmitData8>
	while (!(LL_SPI_IsActiveFlag_RXNE(SPI2)));
 80032b0:	4809      	ldr	r0, [pc, #36]	; (80032d8 <_ZN9SpiDriver8TransmitEh+0x54>)
 80032b2:	f7ff ff02 	bl	80030ba <LL_SPI_IsActiveFlag_RXNE>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	bf0c      	ite	eq
 80032bc:	2301      	moveq	r3, #1
 80032be:	2300      	movne	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d000      	beq.n	80032c8 <_ZN9SpiDriver8TransmitEh+0x44>
 80032c6:	e7f3      	b.n	80032b0 <_ZN9SpiDriver8TransmitEh+0x2c>
	return LL_SPI_ReceiveData8(SPI2);
 80032c8:	4803      	ldr	r0, [pc, #12]	; (80032d8 <_ZN9SpiDriver8TransmitEh+0x54>)
 80032ca:	f7ff ff1c 	bl	8003106 <LL_SPI_ReceiveData8>
 80032ce:	4603      	mov	r3, r0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	40003800 	.word	0x40003800

080032dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80032dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003314 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80032e0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80032e2:	e003      	b.n	80032ec <LoopCopyDataInit>

080032e4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80032e4:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80032e6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80032e8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80032ea:	3104      	adds	r1, #4

080032ec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80032ec:	480b      	ldr	r0, [pc, #44]	; (800331c <LoopForever+0xa>)
	ldr	r3, =_edata
 80032ee:	4b0c      	ldr	r3, [pc, #48]	; (8003320 <LoopForever+0xe>)
	adds	r2, r0, r1
 80032f0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80032f2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80032f4:	d3f6      	bcc.n	80032e4 <CopyDataInit>
	ldr	r2, =_sbss
 80032f6:	4a0b      	ldr	r2, [pc, #44]	; (8003324 <LoopForever+0x12>)
	b	LoopFillZerobss
 80032f8:	e002      	b.n	8003300 <LoopFillZerobss>

080032fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80032fa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80032fc:	f842 3b04 	str.w	r3, [r2], #4

08003300 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003300:	4b09      	ldr	r3, [pc, #36]	; (8003328 <LoopForever+0x16>)
	cmp	r2, r3
 8003302:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003304:	d3f9      	bcc.n	80032fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003306:	f000 f813 	bl	8003330 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800330a:	f000 f877 	bl	80033fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800330e:	f7ff fced 	bl	8002cec <main>

08003312 <LoopForever>:

LoopForever:
    b LoopForever
 8003312:	e7fe      	b.n	8003312 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003314:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8003318:	080034fc 	.word	0x080034fc
	ldr	r0, =_sdata
 800331c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003320:	20005ea0 	.word	0x20005ea0
	ldr	r2, =_sbss
 8003324:	20005ea0 	.word	0x20005ea0
	ldr	r3, = _ebss
 8003328:	20005ec8 	.word	0x20005ec8

0800332c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800332c:	e7fe      	b.n	800332c <ADC1_2_IRQHandler>
	...

08003330 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003334:	4a2e      	ldr	r2, [pc, #184]	; (80033f0 <SystemInit+0xc0>)
 8003336:	4b2e      	ldr	r3, [pc, #184]	; (80033f0 <SystemInit+0xc0>)
 8003338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003340:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif



      RCC->CR |= RCC_CR_HSEON;   /*chose internal 16mhz as base clock*/
 8003344:	4a2b      	ldr	r2, [pc, #172]	; (80033f4 <SystemInit+0xc4>)
 8003346:	4b2b      	ldr	r3, [pc, #172]	; (80033f4 <SystemInit+0xc4>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800334e:	6013      	str	r3, [r2, #0]
      while((RCC->CR & RCC_CR_HSERDY) != RCC_CR_HSERDY); /*wake for internal source to be ready*/
 8003350:	bf00      	nop
 8003352:	4b28      	ldr	r3, [pc, #160]	; (80033f4 <SystemInit+0xc4>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800335e:	d1f8      	bne.n	8003352 <SystemInit+0x22>

      RCC->CR &= ~RCC_CR_PLLON; /* disable PLL  it could be configured only when it is  disabled*/
 8003360:	4a24      	ldr	r2, [pc, #144]	; (80033f4 <SystemInit+0xc4>)
 8003362:	4b24      	ldr	r3, [pc, #144]	; (80033f4 <SystemInit+0xc4>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800336a:	6013      	str	r3, [r2, #0]

      FLASH->ACR |= FLASH_ACR_LATENCY_2;
 800336c:	4a22      	ldr	r2, [pc, #136]	; (80033f8 <SystemInit+0xc8>)
 800336e:	4b22      	ldr	r3, [pc, #136]	; (80033f8 <SystemInit+0xc8>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f043 0304 	orr.w	r3, r3, #4
 8003376:	6013      	str	r3, [r2, #0]

      /* Reset CFGR register */
      RCC->CFGR = 0x00000000U;
 8003378:	4b1e      	ldr	r3, [pc, #120]	; (80033f4 <SystemInit+0xc4>)
 800337a:	2200      	movs	r2, #0
 800337c:	605a      	str	r2, [r3, #4]
      RCC->CFGR |=  RCC_CFGR_PLLMUL9;
 800337e:	4a1d      	ldr	r2, [pc, #116]	; (80033f4 <SystemInit+0xc4>)
 8003380:	4b1c      	ldr	r3, [pc, #112]	; (80033f4 <SystemInit+0xc4>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8003388:	6053      	str	r3, [r2, #4]
      RCC->CFGR |=  RCC_CFGR_PLLSRC_HSE_PREDIV;
 800338a:	4a1a      	ldr	r2, [pc, #104]	; (80033f4 <SystemInit+0xc4>)
 800338c:	4b19      	ldr	r3, [pc, #100]	; (80033f4 <SystemInit+0xc4>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003394:	6053      	str	r3, [r2, #4]
      RCC->CFGR |=  RCC_CFGR_PPRE2_DIV2;
 8003396:	4a17      	ldr	r2, [pc, #92]	; (80033f4 <SystemInit+0xc4>)
 8003398:	4b16      	ldr	r3, [pc, #88]	; (80033f4 <SystemInit+0xc4>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033a0:	6053      	str	r3, [r2, #4]

      RCC->CR |= RCC_CR_PLLON;
 80033a2:	4a14      	ldr	r2, [pc, #80]	; (80033f4 <SystemInit+0xc4>)
 80033a4:	4b13      	ldr	r3, [pc, #76]	; (80033f4 <SystemInit+0xc4>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033ac:	6013      	str	r3, [r2, #0]
      while((RCC->CR & RCC_CR_PLLRDY) != RCC_CR_PLLRDY);
 80033ae:	bf00      	nop
 80033b0:	4b10      	ldr	r3, [pc, #64]	; (80033f4 <SystemInit+0xc4>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033bc:	d1f8      	bne.n	80033b0 <SystemInit+0x80>





      RCC->CFGR  |= RCC_CFGR_SW_PLL;
 80033be:	4a0d      	ldr	r2, [pc, #52]	; (80033f4 <SystemInit+0xc4>)
 80033c0:	4b0c      	ldr	r3, [pc, #48]	; (80033f4 <SystemInit+0xc4>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f043 0302 	orr.w	r3, r3, #2
 80033c8:	6053      	str	r3, [r2, #4]
      while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80033ca:	bf00      	nop
 80033cc:	4b09      	ldr	r3, [pc, #36]	; (80033f4 <SystemInit+0xc4>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f003 030c 	and.w	r3, r3, #12
 80033d4:	2b08      	cmp	r3, #8
 80033d6:	d1f9      	bne.n	80033cc <SystemInit+0x9c>

      /* Disable all interrupts */
      RCC->CIR = 0x00000000U;
 80033d8:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <SystemInit+0xc4>)
 80033da:	2200      	movs	r2, #0
 80033dc:	609a      	str	r2, [r3, #8]

      /* Configure the Vector Table location add offset address ------------------*/
    #ifdef VECT_TAB_SRAM
      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
    #else
      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80033de:	4b04      	ldr	r3, [pc, #16]	; (80033f0 <SystemInit+0xc0>)
 80033e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033e4:	609a      	str	r2, [r3, #8]
    #endif
}
 80033e6:	bf00      	nop
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	e000ed00 	.word	0xe000ed00
 80033f4:	40021000 	.word	0x40021000
 80033f8:	40022000 	.word	0x40022000

080033fc <__libc_init_array>:
 80033fc:	b570      	push	{r4, r5, r6, lr}
 80033fe:	4e0d      	ldr	r6, [pc, #52]	; (8003434 <__libc_init_array+0x38>)
 8003400:	4c0d      	ldr	r4, [pc, #52]	; (8003438 <__libc_init_array+0x3c>)
 8003402:	1ba4      	subs	r4, r4, r6
 8003404:	10a4      	asrs	r4, r4, #2
 8003406:	2500      	movs	r5, #0
 8003408:	42a5      	cmp	r5, r4
 800340a:	d109      	bne.n	8003420 <__libc_init_array+0x24>
 800340c:	4e0b      	ldr	r6, [pc, #44]	; (800343c <__libc_init_array+0x40>)
 800340e:	4c0c      	ldr	r4, [pc, #48]	; (8003440 <__libc_init_array+0x44>)
 8003410:	f000 f818 	bl	8003444 <_init>
 8003414:	1ba4      	subs	r4, r4, r6
 8003416:	10a4      	asrs	r4, r4, #2
 8003418:	2500      	movs	r5, #0
 800341a:	42a5      	cmp	r5, r4
 800341c:	d105      	bne.n	800342a <__libc_init_array+0x2e>
 800341e:	bd70      	pop	{r4, r5, r6, pc}
 8003420:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003424:	4798      	blx	r3
 8003426:	3501      	adds	r5, #1
 8003428:	e7ee      	b.n	8003408 <__libc_init_array+0xc>
 800342a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800342e:	4798      	blx	r3
 8003430:	3501      	adds	r5, #1
 8003432:	e7f2      	b.n	800341a <__libc_init_array+0x1e>
 8003434:	080034f4 	.word	0x080034f4
 8003438:	080034f4 	.word	0x080034f4
 800343c:	080034f4 	.word	0x080034f4
 8003440:	080034f8 	.word	0x080034f8

08003444 <_init>:
 8003444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003446:	bf00      	nop
 8003448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800344a:	bc08      	pop	{r3}
 800344c:	469e      	mov	lr, r3
 800344e:	4770      	bx	lr

08003450 <_fini>:
 8003450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003452:	bf00      	nop
 8003454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003456:	bc08      	pop	{r3}
 8003458:	469e      	mov	lr, r3
 800345a:	4770      	bx	lr
